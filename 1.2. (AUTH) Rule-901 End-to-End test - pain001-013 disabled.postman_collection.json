{
	"info": {
		"_postman_id": "92cf53fb-d5a4-4ade-8d61-03432deef1cc",
		"name": "1.2. (AUTH) Rule-901 End-to-End test - pain001/013 disabled",
		"description": "# 20240622\n\n- Implemented new TMS API path",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28250551"
	},
	"item": [
		{
			"name": "Message Creation sans pain.001/013",
			"item": [
				{
					"name": "Create messages in memory",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"utils.setPm(pm); // set the utils _pm to the pre-request script pm\r",
									"let moment = require('moment');\r",
									"// ## Set up rule config\r",
									"\r",
									"pm.globals.set(\"dataCache\", undefined);\r",
									"pm.globals.set(\"endToEndId\", undefined);\r",
									"pm.globals.set(\"messageIdPain001\", undefined);\r",
									"pm.globals.set(\"messageIdPain013\", undefined);\r",
									"pm.globals.set(\"messageIdPacs008\", undefined);\r",
									"pm.globals.set(\"messageIdPacs002\", undefined);\r",
									"pm.globals.set(\"pain001\", undefined);\r",
									"pm.globals.set(\"pain013\", undefined);\r",
									"pm.globals.set(\"pacs008\", undefined);\r",
									"pm.globals.set(\"pacs002\", undefined);\r",
									"\r",
									"console.log(`Data Preparation Service - Full Network Map`);\r",
									"\r",
									"// ## Set up transaction eco-system\r",
									"\r",
									"utils.createNewTransactionSetInMemory();\r",
									"\r",
									"// ## Set up body variables\r",
									"\r",
									"let messageBody = pm.globals.get('pain001');\r",
									"pm.globals.set('messageBody', messageBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const activePain001 = JSON.parse(pm.environment.get('activePain001'));\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"let dataCache = JSON.parse(pm.globals.get(\"dataCache\"));\r",
									"let endToEndId = pm.globals.get(\"endToEndId\");\r",
									"let messageIdPacs008 = pm.globals.get(\"messageIdPacs008\");\r",
									"let messageIdPacs002 = pm.globals.get(\"messageIdPacs002\");\r",
									"let pacs008 = pm.globals.get(\"pacs008\");\r",
									"let pacs002 = pm.globals.get(\"pacs002\");\r",
									"\r",
									"pm.test(`Has a new dataCache:dbtrId value: ${dataCache.dbtrId}`, function() {\r",
									"  pm.expect(dataCache.dbtrId, `${dataCache.dbtrId}`).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(`Has a new dataCache:cdtrId value: ${dataCache.cdtrId}`, function() {\r",
									"  pm.expect(dataCache.cdtrId).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(`Has a dataCache:dbtrAcctId value: ${dataCache.dbtrAcctId}`, function() {\r",
									"  pm.expect(dataCache.dbtrAcctId).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(`Has a dataCache:cdtrAcctId value: ${dataCache.cdtrAcctId}`, function() {\r",
									"  pm.expect(dataCache.cdtrAcctId).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(`Has a new endToEndId value: ${endToEndId}`, function() {\r",
									"  pm.expect(endToEndId).to.be.a('string');\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(`Has a new pacs.008 msgId value: ${messageIdPacs008}`, function() {\r",
									"  pm.expect(messageIdPacs008).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(`Has a new pacs.002 msgId value: ${messageIdPacs002}`, function() {\r",
									"  pm.expect(messageIdPacs002).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(`Has a new pacs.008 body for TMS API`, function() {\r",
									"  pm.expect(pacs008).to.be.a('string');\r",
									"});\r",
									"\r",
									"pm.test(`Has a new pacs.002 body for Data Preparation`, function() {\r",
									"  pm.expect(pacs002).to.be.a('string');\r",
									"});\r",
									"\r",
									"if (activePain001) {\r",
									"    let messageIdPain001 = pm.globals.get(\"messageIdPain001\");\r",
									"    let messageIdPain013 = pm.globals.get(\"messageIdPain013\");\r",
									"    let pain001 = pm.globals.get(\"pain001\");\r",
									"    let pain013 = pm.globals.get(\"pain013\");\r",
									"    pm.test(`Has a new pain.001 msgId value: ${messageIdPain001}`, function() {\r",
									"    pm.expect(messageIdPain001).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    pm.test(`Has a new pain.013 msgId value: ${messageIdPain013}`, function() {\r",
									"    pm.expect(messageIdPain013).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    pm.test(`Has a new pain.001 body for TMS API`, function() {\r",
									"    pm.expect(pain001).to.be.a('string');\r",
									"    });\r",
									"\r",
									"    pm.test(`Has a new pain.013 body for TMS API`, function() {\r",
									"    pm.expect(pain013).to.be.a('string');\r",
									"    });\r",
									"} else {\r",
									"    pm.test(`pain.001/013 messages disabled`, function() {\r",
									"    pm.expect(activePain001).to.be.false;\r",
									"    });\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}",
							"host": [
								"{{ofUrl}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post pacs.008 to TMS API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let messageBody = pm.globals.get('pacs008');\r",
									"pm.globals.set('messageBody', messageBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pacs.008 successfully submitted to TMS API\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{messageBody}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}{{path-api-version}}/{{path-pacs008}}",
							"host": [
								"{{ofUrl}}{{path-api-version}}"
							],
							"path": [
								"{{path-pacs008}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post pacs.002 to TMS API",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let messageBody = pm.globals.get('pacs002');\r",
									"pm.globals.set('messageBody', messageBody);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"pacs.002 successfully submitted to TMS API\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{auth-token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{{pacs002}}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{ofUrl}}{{path-api-version}}/{{path-pacs002}}",
							"host": [
								"{{ofUrl}}{{path-api-version}}"
							],
							"path": [
								"{{path-pacs002}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "DB update tests",
			"item": [
				{
					"name": "Get Arango Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = pm.response.json();\r",
									"//console.log(jsonData[\"jwt\"])\r",
									"\r",
									"pm.globals.set(\"arangoToken\", jsonData[\"jwt\"])\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"{{arangoUsername}}\",\r\n    \"password\": \"{{arangoPassword}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{arangoUrl}}/_open/auth",
							"host": [
								"{{arangoUrl}}"
							],
							"path": [
								"_open",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch created pacs.008 from transactionHistoryPacs008",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`Fetching pacs.008 from transactionHistoryPacs008 using msgId: ${pm.globals.get('messageIdPacs008')}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resJson = pm.response.json();\r",
									"\r",
									"let memPacs008MsgId = pm.globals.get('messageIdPacs008')\r",
									"\r",
									"pm.test(`pacs.008 with msgId ${memPacs008MsgId} found`, function () {\r",
									"    pm.expect(resJson.result[0].FIToFICstmrCdtTrf.GrpHdr.MsgId).to.be.equal(memPacs008MsgId);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{arangoToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"FOR doc in {{db_coll_msg_transactionHistoryPacs008}} FILTER doc.FIToFICstmrCdtTrf.GrpHdr.MsgId == '{{messageIdPacs008}}' RETURN doc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{arangoUrl}}/_db/{{db_messagehistory}}/_api/cursor",
							"host": [
								"{{arangoUrl}}"
							],
							"path": [
								"_db",
								"{{db_messagehistory}}",
								"_api",
								"cursor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch created pacs.002 from transactionHistoryPacs002",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`Fetching pacs.002 from transactionHistoryPacs002 using msgId: ${pm.globals.get('messageIdPacs002')}`);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resJson = pm.response.json();\r",
									"\r",
									"let memPacs002MsgId = pm.globals.get('messageIdPacs002')\r",
									"\r",
									"pm.test(`pacs.002 with msgId ${memPacs002MsgId} found`, function () {\r",
									"    pm.expect(resJson.result[0].FIToFIPmtSts.GrpHdr.MsgId).to.be.equal(memPacs002MsgId);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{arangoToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"FOR doc in {{db_coll_msg_transactionHistoryPacs002}} FILTER doc.FIToFIPmtSts.GrpHdr.MsgId == '{{messageIdPacs002}}' RETURN doc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{arangoUrl}}/_db/{{db_messagehistory}}/_api/cursor",
							"host": [
								"{{arangoUrl}}"
							],
							"path": [
								"_db",
								"{{db_messagehistory}}",
								"_api",
								"cursor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Check graph creation",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`Fetching graph from ${pm.environment.get('db_historygraph')} using creditorAccountKey : ${pm.globals.get('creditorAccountKey')}`);\r",
									"\r",
									"let qryString = `LET vertices = (FOR v,e,p IN 1..2 ANY 'accounts/${pm.globals.get('creditorAccountKey')}' transactionRelationship, account_holder RETURN distinct v) LET edges = (FOR v,e,p IN 1..2 ANY 'accounts/${pm.globals.get('creditorAccountKey')}' transactionRelationship, account_holder RETURN distinct e) RETURN {v: vertices, e: edges}`\r",
									"\r",
									"pm.globals.set('qryString', qryString);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resJson = pm.response.json();\r",
									"\r",
									"let debtor = false;\r",
									"let debtorAccount = false;\r",
									"let debtorAccountHolder = false;\r",
									"let creditor = false\r",
									"let creditorAccountHolder = false;\r",
									"let creditorAccount = false;\r",
									"let pain001 = false;\r",
									"let pain013 = false;\r",
									"let pacs008 = false;\r",
									"let pacs002 = false;\r",
									"\r",
									"for (let i = 0; i < resJson.result[0].e.length; i++) {\r",
									"\r",
									"    if (resJson.result[0].e[i]._id.search(\"account_holder\") >= 0) {\r",
									"        if ((resJson.result[0].e[i]._from.search(pm.globals.get('debtorKey')) >= 0) && (resJson.result[0].e[i]._to.search(pm.globals.get('debtorAccountKey')) >= 0)) {\r",
									"            debtorAccountHolder = true;\r",
									"        } else if ((resJson.result[0].e[i]._from.search(pm.globals.get('creditorKey')) >= 0) && (resJson.result[0].e[i]._to.search(pm.globals.get('creditorAccountKey')) >= 0))\r",
									"        {\r",
									"            creditorAccountHolder = true;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    if (resJson.result[0].e[i]._id.search(\"transactionRelationship\") >= 0) {\r",
									"        if (resJson.result[0].e[i].TxTp.search(\"pain.001.001.11\") >= 0) {\r",
									"            pain001 = true;\r",
									"        } else if (resJson.result[0].e[i].TxTp.search(\"pain.013.001.09\") >= 0) {\r",
									"            pain013 = true;\r",
									"        } else if (resJson.result[0].e[i].TxTp.search(\"pacs.008.001.10\") >= 0) {\r",
									"            pacs008 = true;\r",
									"        } else if (resJson.result[0].e[i].TxTp.search(\"pacs.002.001.12\") >= 0) {\r",
									"            pacs002 = true;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"for (let i = 0; i < resJson.result[0].v.length; i++) {\r",
									"\r",
									"    if (resJson.result[0].v[i]._id.search(\"entities\") >= 0) {\r",
									"        if (resJson.result[0].v[i]._key == pm.globals.get('debtorKey')) {\r",
									"            debtor = true;\r",
									"        } else if (resJson.result[0].v[i]._key == pm.globals.get('creditorKey')) {\r",
									"            creditor = true;\r",
									"        }\r",
									"    }\r",
									"\r",
									"    if (resJson.result[0].v[i]._id.search(\"accounts\") >= 0) {\r",
									"        if (resJson.result[0].v[i]._key == pm.globals.get('debtorAccountKey')) {\r",
									"            debtorAccount = true;\r",
									"        } else if (resJson.result[0].v[i]._key == pm.globals.get('creditorAccountKey')) {\r",
									"            creditorAccount = true;\r",
									"        }\r",
									"    }\r",
									"}\r",
									"\r",
									"pm.test(`Graph contains an entity vertex for debtor entity with debtorKey ${pm.globals.get('debtorKey')}`, function () {\r",
									"    pm.expect(debtor).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(`Graph contains an entity vertex for creditor entity with creditorKey ${pm.globals.get('creditorKey')}`, function () {\r",
									"    pm.expect(creditor).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(`Graph contains an account vertex for debtor account with debtorAccountKey ${pm.globals.get('debtorAccountKey')}`, function () {\r",
									"    pm.expect(debtorAccount).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(`Graph contains an account vertex for creditor account with creditorAccountKey ${pm.globals.get('creditorAccountKey')}`, function () {\r",
									"    pm.expect(creditorAccount).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(`Graph contains an account_holder edge for debtor entity with debtorKey ${pm.globals.get('debtorKey')} and debtorAccountKey ${pm.globals.get('debtorAccountKey')}`, function () {\r",
									"    pm.expect(debtorAccountHolder).to.be.true;\r",
									"});\r",
									"\r",
									"pm.test(`Graph contains an account_holder edge for creditor entity with creditorKey ${pm.globals.get('creditorKey')} and creditorAccountKey ${pm.globals.get('creditorAccountKey')}`, function () {\r",
									"    pm.expect(creditorAccountHolder).to.be.true;\r",
									"});\r",
									"\r",
									"let activePain001 = JSON.parse(pm.environment.get('activePain001'));\r",
									"\r",
									"if (activePain001) {\r",
									"    pm.test(`Pain.001/013 is enabled and graph contains a pain.001 relationship`, function () {\r",
									"        pm.expect(pain001).to.be.true;\r",
									"    });\r",
									"    pm.test(`Pain.001/013 is enabled and graph contains a pain.013 relationship`, function () {\r",
									"        pm.expect(pain013).to.be.true;\r",
									"    });\r",
									"} else {\r",
									"    pm.test(`Pain.001/013 is disabled and graph does not contain a pain.001 relationship`, function () {\r",
									"        pm.expect(pain001).to.be.false;\r",
									"    });\r",
									"    pm.test(`Pain.001/013 is disabled and graph does not contain a pain.013 relationship`, function () {\r",
									"        pm.expect(pain013).to.be.false;\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(`Graph contains a pacs.008 relationship`, function () {\r",
									"    pm.expect(pacs008).to.be.true;\r",
									"});\r",
									"pm.test(`Graph contains a pacs.002 relationship`, function () {\r",
									"    pm.expect(pacs002).to.be.true;\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{arangoToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"{{qryString}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{arangoUrl}}/_db/{{db_historygraph}}/_api/cursor",
							"host": [
								"{{arangoUrl}}"
							],
							"path": [
								"_db",
								"{{db_historygraph}}",
								"_api",
								"cursor"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fetch evaluation results with msgId - Rule 901 Network Map Only",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(`Fetching result for pacs.002 msgId: ${pm.globals.get('messageIdPacs002')}`);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"const resJson = pm.response.json();\r",
									"\r",
									"const rulesPerTypologyCount = [1];\r",
									"const totalExpectedTypologies = 1;\r",
									"const expectedAlertStatus = \"NALT\";\r",
									"const interdictionTypologies = [\r",
									"  \"000\",\r",
									"  \"028\",\r",
									"  \"037\",\r",
									"  \"044\",\r",
									"  \"045\",\r",
									"  \"047\",\r",
									"  \"095\",\r",
									"  \"179\",\r",
									"  \"185\",\r",
									"  \"999\"\r",
									"];\r",
									"const ruleDescriptions = {\r",
									"  \"001\": \"Derived account age - creditor\",\r",
									"  \"002\": \"Transaction convergence - debtor\",\r",
									"  \"003\": \"Account dormancy - creditor\",\r",
									"  \"004\": \"Account dormancy - debtor\",\r",
									"  \"006\": \"Outgoing transfer similarity - amounts\",\r",
									"  \"007\": \"Outgoing transfer similarity - descriptions\",\r",
									"  \"008\": \"Outgoing transfer similarity - creditor\",\r",
									"  \"010\": \"Increased account activity: volume - debtor\",\r",
									"  \"011\": \"Increased account activity: volume - creditor\",\r",
									"  \"016\": \"Transaction convergence - creditor\",\r",
									"  \"017\": \"Transaction divergence - debtor\",\r",
									"  \"018\": \"Exceptionally large outgoing transfer - debtor\",\r",
									"  \"020\": \"Large transaction amount vs history - creditor\",\r",
									"  \"021\": \"A large number of similar transaction amounts - creditor\",\r",
									"  \"024\": \"Non-commissioned transaction mirroring - creditor\",\r",
									"  \"025\": \"Non-commissioned transaction mirroring - debtor\",\r",
									"  \"026\": \"Commissioned transaction mirroring - creditor\",\r",
									"  \"027\": \"Commissioned transaction mirroring - debtor\",\r",
									"  \"028\": \"Age classification - debtor\",\r",
									"  \"030\": \"Transfer to unfamiliar creditor account - debtor\",\r",
									"  \"044\": \"Successful transactions from the debtor, including the new transaction\",\r",
									"  \"045\": \"Successful transactions to the creditor, including the new transaction\",\r",
									"  \"048\": \"Large transaction amount vs history - debtor\",\r",
									"  \"054\": \"Synthetic data check - Benford's Law - debtor\",\r",
									"  \"063\": \"Synthetic data check - Benford's Law - creditor\",\r",
									"  \"074\": \"Distance over time from last transaction location - debtor\",\r",
									"  \"075\": \"Distance from habitual locations - debtor\",\r",
									"  \"076\": \"Time since last transaction - debtor\",\r",
									"  \"078\": \"Transaction type\",\r",
									"  \"083\": \"Multiple accounts associated with a debtor\",\r",
									"  \"084\": \"Multiple accounts associated with a creditor\",\r",
									"  \"090\": \"Upstream transaction divergence - debtor\",\r",
									"  \"091\": \"Transaction amount vs regulatory threshold\"\r",
									"}\r",
									"const typologyDescriptions = {\r",
									"  \"000\": \"Complete rule coverage\",\r",
									"  \"001\": \"Use of several currencies, structured transactions, with a great number of persons involved, large number of transactions related to each other during a short time period.\",\r",
									"  \"002\": \"Receiving funds from high number of senders over a short period of time, large sum transactions compared to person's living standard.\",\r",
									"  \"003\": \"Large volume of transactions for the same customer with multiple instances of using different name spellings, false addresses or identification that evolves i.e. some parts of the identification change, while other parts remains the same, such as a person whose last name changes while his first name, date of birth, identification number and address remain the same.\",\r",
									"  \"005\": \"Unusual ratio of sent to received transactions (the direction of the flow of the suspicious ratio imbalance being determined by the context). Large inbound transaction with multiple small withdrawals or payments to multiple individual beneficiaries. Multiple small deposits are made into the account with a single large deposit to another account or large withdrawal from the ATM.\",\r",
									"  \"010\": \"Series of transactions structured just below the threshold in order to prevent the transaction being reported to the regulatory authority.\",\r",
									"  \"011\": \"Money transfers from one account to numerous unrelated accounts. The immediate remittance or transfer of funds once they are deposited into an account.\",\r",
									"  \"013\": \"Holding a large number of accounts with the same Internet payment services provider allows for a customer to access multiple channels through which a transaction is able to be performed. With multiple transacting channels a fraudster or money laundering can structure their activity in order to make it appear more legitimate.\",\r",
									"  \"024\": \"Large number of transfers between a group of individuals and accounts made in a systematic way\",\r",
									"  \"028\": \"False promotions, phishing, or social engineering scams.\",\r",
									"  \"037\": \"Mobile Network Operator Employees/Agents transferring customer funds to personal account.\",\r",
									"  \"044\": \"Fraudster takes over the account of a legitimate customer and uses monies/credit facilities in them.\",\r",
									"  \"045\": \"Fraudsters use the personal details of a victim to create bank accounts and apply for credit. The account is then utilised to withdraw the funds or immediate transactions are performed soon after the account is opened\",\r",
									"  \"047\": \"Fraudsters secure mobile wallet or account details of victims and conduct user-not-present fraud.\",\r",
									"  \"051\": \"Performing similar transactions (i.e. cash deposits) at multiple branches of the same institution on the same business day\",\r",
									"  \"052\": \"Accounts of salaried employees credited outside of normal salary scope\",\r",
									"  \"092\": \"Accounts that show unexpectedly large cash deposits and immediate withdrawals\",\r",
									"  \"095\": \"Duplication of payments from a single account.\",\r",
									"  \"098\": \"Customer receives many small incoming wire transfers and then orders a large outgoing wire transfer.\",\r",
									"  \"105\": \"Associations with multiple accounts under multiple names. Use of aliases for the purpose of opening multiple accounts in different banks, or in different branches of the same bank\",\r",
									"  \"107\": \"Elaborate movement of funds through different accounts. This may be highlighted through transactional activity on different accounts belonging to the same customer.\",\r",
									"  \"121\": \"Unexplained deposits into the bank account of an unemployed spouse or minor.\",\r",
									"  \"124\": \"Large/frequent cash deposits into accounts. This risk can also occur where there are rapid deposits of the same amount into the account. Generally where the deposit is difficult to explain. There are also transfers into the account from other entities. Large amount of cash from unexplained sources. This can also include a large volume of cash and / or cheque deposits into the bank account on a regular basis. Often this is followed up with a number of cheques drawn on the account or suspicious withdrawals.\",\r",
									"  \"129\": \"Smurfing/scattering illicit funds.\",\r",
									"  \"137\": \"Transaction in excess of the country's reporting threshold.\",\r",
									"  \"169\": \"Suspicious transaction amount patterns.\",\r",
									"  \"179\": \"Improbable transaction location.\",\r",
									"  \"185\": \"Transaction pattern is not in line with the past transactional patterns. This can be in the value and volume of transactions.\",\r",
									"  \"191\": \"Cash withdrawal.\",\r",
									"  \"195\": \"Payments to newly registered accounts.\",\r",
									"  \"214\": \"Mule accounts.\",\r",
									"  \"216\": \"The structuring of transactions using the same beneficiaries and a large number of transactions during a short time period.\"\r",
									"}\r",
									"\r",
									"let ruleCount = 0;\r",
									"let typologyCount = 0;\r",
									"let slowestRule = 0;\r",
									"let fastestRule = 999999999;\r",
									"let slowestTypology = 0;\r",
									"let fastestTypology = 999999999;\r",
									"let totalRule = 0;\r",
									"let totalTypology = 0;\r",
									"let prcgTmDP = resJson.result[0].report.metaData.prcgTmDP;\r",
									"let prcgTmED = resJson.result[0].report.metaData.prcgTmED;\r",
									"let tadpTime = resJson.result[0].report.tadpResult.prcgTm;\r",
									"let whichTypologyIsSlowest = 0;\r",
									"let whichTypologyIsFastest = 0;\r",
									"let whichRuleIsSlowest = 0;\r",
									"\r",
									"let typologyTimings = resJson.result[0].report.tadpResult.typologyResult.filter(e => e.prcgTm > 0);\r",
									"\r",
									"let timingsPerTypology = `Elapsed typology processor time per typology\r",
									"====================================================\r",
									"`;\r",
									"\r",
									"let sortedTypologyTimings = typologyTimings.sort((e1, e2) => (e1.prcgTm < e2.prcgTm) ? 1 : (e1.prcgTm > e2.prcgTm) ? -1 : 0);\r",
									"\r",
									"for (let i = 0; i < sortedTypologyTimings.count(); i++) {\r",
									"    timingsPerTypology = timingsPerTypology + `   ${sortedTypologyTimings[i].cfg}: ${(sortedTypologyTimings[i].prcgTm/1000000).toFixed(3)}\\n`;\r",
									"}\r",
									"\r",
									"typologyTimings = typologyTimings.filter(e => e.prcgTm > 0).map(e => e.prcgTm);\r",
									"\r",
									"ruleResults = [];\r",
									"for (let i = 0; i < resJson.result[0].report.tadpResult.typologyResult.count(); i++) {\r",
									"    ruleResultsPerTypology = resJson.result[0].report.tadpResult.typologyResult[i].ruleResults.filter(e => e.prcgTm > 0);\r",
									"    for (let j = 0; j < ruleResultsPerTypology.count(); j++) {\r",
									"        ruleResults.push(ruleResultsPerTypology[j]);\r",
									"    };\r",
									"    ruleResultsPerTypology = [];\r",
									"}\r",
									"\r",
									"const ruleResultsUnique = [...new Map(ruleResults.map((e) => [e.id, e])).values()];\r",
									"ruleTimings = ruleResultsUnique.filter(e => e.prcgTm > 0).map(e => e.prcgTm);\r",
									"\r",
									"ruleCount = ruleTimings.count();\r",
									"typologyCount = typologyTimings.count();\r",
									"\r",
									"for (let i = 0; i < typologyCount; i++) {\r",
									"    totalTypology += typologyTimings[i];\r",
									"    if (typologyTimings[i] > slowestTypology) {\r",
									"        slowestTypology = typologyTimings[i];\r",
									"        whichTypologyIsSlowest = i;\r",
									"    }\r",
									"    if (typologyTimings[i] < fastestTypology) {\r",
									"        fastestTypology = typologyTimings[i];\r",
									"        whichTypologyIsFastest = i;\r",
									"    }\r",
									"}\r",
									"\r",
									"for (let i = 0; i < ruleCount; i++) {\r",
									"    totalRule += ruleTimings[i];\r",
									"    if (ruleTimings[i] > slowestRule) {\r",
									"        slowestRule = ruleTimings[i];\r",
									"    }\r",
									"    if (ruleTimings[i] < fastestRule) {\r",
									"        fastestRule = ruleTimings[i];\r",
									"    }\r",
									"}\r",
									"\r",
									"whichRuleIsSlowest = ruleResultsUnique.filter(e => e.prcgTm === slowestRule)[0].id;\r",
									"whichRuleIsFastest = ruleResultsUnique.filter(e => e.prcgTm === fastestRule)[0].id;\r",
									"\r",
									"let totalEstimatedTime = prcgTmDP + prcgTmED + slowestRule + slowestTypology + tadpTime;\r",
									"let averageRuleTime = totalRule / ruleCount;\r",
									"let averageTypologyTime = totalTypology / typologyCount;\r",
									"\r",
									"console.log(`====================================================\r",
									"Total Estimate Time: ${(totalEstimatedTime/1000000).toFixed(3)}ms;\r",
									"====================================================\r",
									"Data Preparation Service: ${(prcgTmDP/1000000).toFixed(3)}ms\r",
									"ED: ${(prcgTmED/1000000).toFixed(3)}ms\r",
									"====================================================\r",
									"Number of Rules: ${ruleCount}\r",
									"Slowest Rule: ${(slowestRule/1000000).toFixed(3)}ms (Rule ${whichRuleIsSlowest})\r",
									"Fastest Rule: ${(fastestRule/1000000).toFixed(3)}ms (Rule ${whichRuleIsFastest})\r",
									"Rule Average: ${(averageRuleTime/1000000).toFixed(3)}ms\r",
									"====================================================\r",
									"Number of Typologies: ${typologyCount}\r",
									"Slowest Typology: ${(slowestTypology/1000000).toFixed(3)}ms (Typology ${resJson.result[0].report.tadpResult.typologyResult[whichTypologyIsSlowest].cfg})\r",
									"Fastest Typology: ${(fastestTypology/1000000).toFixed(3)}ms (Typology ${resJson.result[0].report.tadpResult.typologyResult[whichTypologyIsFastest].cfg})\r",
									"\r",
									"Typology Average: ${(averageTypologyTime/1000000).toFixed(3)}ms\r",
									"====================================================\r",
									"TADP: ${(tadpTime/1000000).toFixed(3)}ms\r",
									"====================================================`);\r",
									"\r",
									"let timingsPerRule = `Elapsed time per rule\r",
									"====================================================\r",
									"`;\r",
									"\r",
									"let sortedRuleTimings = ruleResultsUnique.sort((e1, e2) => (e1.prcgTm < e2.prcgTm) ? 1 : (e1.prcgTm > e2.prcgTm) ? -1 : 0);\r",
									"\r",
									"for (let i = 0; i < sortedRuleTimings.count(); i++) {\r",
									"    timingsPerRule = timingsPerRule + `   ${sortedRuleTimings[i].id}: ${(sortedRuleTimings[i].prcgTm/1000000).toFixed(3)} - ${ruleDescriptions[sortedRuleTimings[i].id.substring(0,3)]}\\n`;\r",
									"}\r",
									"\r",
									"console.log(timingsPerRule);\r",
									"console.log(timingsPerTypology);\r",
									"\r",
									"let sortedRuleTimingsById = ruleResultsUnique.sort((e1, e2) => (e1.id > e2.id) ? 1 : (e1.id < e2.id) ? -1 : 0);\r",
									"\r",
									"/* Tests below only apply if the rule reasons are being reported\r",
									"================================================================\r",
									"pm.test(`Rule 001 result is \"Creditor account is less than 1 day old\"`, function () { pm.expect(sortedRuleTimingsById[0].reason).to.equal(\"Creditor account is less than 1 day old\"); });\r",
									"pm.test(`Rule 002 result is \"No transaction convergence detected on debtor account\"`, function () { pm.expect(sortedRuleTimingsById[1].reason).to.equal(\"No transaction convergence detected on debtor account\"); });\r",
									"pm.test(`Rule 003 result is \"No verifiable creditor account activity detected\"`, function () { pm.expect(sortedRuleTimingsById[2].reason).to.equal(\"No verifiable creditor account activity detected\"); });\r",
									"pm.test(`Rule 004 result is \"No verifiable debtor account activity detected\"`, function () { pm.expect(sortedRuleTimingsById[3].reason).to.equal(\"No verifiable debtor account activity detected\"); });\r",
									"pm.test(`Rule 006 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[4].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 007 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[5].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 008 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[6].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 010 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[7].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 011 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[8].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 016 result is \"No Transaction convergence detected on creditor account\"`, function () { pm.expect(sortedRuleTimingsById[9].reason).to.equal(\"No Transaction convergence detected on creditor account\"); });\r",
									"pm.test(`Rule 017 result is \"No Transaction divergence detected on source account\"`, function () { pm.expect(sortedRuleTimingsById[10].reason).to.equal(\"No Transaction divergence detected on source account\"); });\r",
									"pm.test(`Rule 018 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[11].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 020 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[12].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 021 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[13].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 024 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[14].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 025 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[15].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 026 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[16].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 027 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[17].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 030 result is \"First successful payment from this debtor to creditor account\"`, function () { pm.expect(sortedRuleTimingsById[18].reason).to.equal(\"First successful payment from this debtor to creditor account\"); });\r",
									"pm.test(`Rule 044 result is \"To date, one successful payment has been made from debtor account\"`, function () { pm.expect(sortedRuleTimingsById[19].reason).to.equal(\"To date, one successful payment has been made from debtor account\"); });\r",
									"pm.test(`Rule 045 result is \"To date, one successful payment has been made to creditor account\"`, function () { pm.expect(sortedRuleTimingsById[20].reason).to.equal(\"To date, one successful payment has been made to creditor account\"); });\r",
									"pm.test(`Rule 048 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[21].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 054 result is \"At least 50 historical transactions required\"`, function () { pm.expect(sortedRuleTimingsById[22].reason).to.equal(\"At least 50 historical transactions required\"); });\r",
									"pm.test(`Rule 063 result is \"At least 50 historical transactions required\"`, function () { pm.expect(sortedRuleTimingsById[23].reason).to.equal(\"At least 50 historical transactions required\"); });\r",
									"pm.test(`Rule 076 result is \"Insufficient transaction history\"`, function () { pm.expect(sortedRuleTimingsById[24].reason).to.equal(\"Insufficient transaction history\"); });\r",
									"pm.test(`Rule 083 result is \"Debtor has only one account\"`, function () { pm.expect(sortedRuleTimingsById[25].reason).to.equal(\"Debtor has only one account\"); });\r",
									"pm.test(`Rule 084 result is \"Creditor has only one account\"`, function () { pm.expect(sortedRuleTimingsById[26].reason).to.equal(\"Creditor has only one account\"); });\r",
									"pm.test(`Rule 090 result is \"Upstream transaction divergence within acceptable limits\"`, function () { pm.expect(sortedRuleTimingsById[27].reason).to.equal(\"Upstream transaction divergence within acceptable limits\"); });\r",
									"pm.test(`Rule 091 result is \"Transaction amount within regulatory limits\"`, function () { pm.expect(sortedRuleTimingsById[28].reason).to.equal(\"Transaction amount within regulatory limits\"); });\r",
									"*/\r",
									"\r",
									"for (let i = 0; i < sortedRuleTimingsById.length; i++) {\r",
									"    pm.test(`Rule ${sortedRuleTimingsById[i].id}@${sortedRuleTimingsById[i].cfg} result.reason omitted`, function () {\r",
									"        pm.expect(sortedRuleTimingsById[i].reason).to.be.eql(undefined);\r",
									"    });\r",
									"\r",
									"    pm.test(`Rule ${sortedRuleTimingsById[i].id}@${sortedRuleTimingsById[i].cfg} result.desc omitted`, function () {\r",
									"        pm.expect(sortedRuleTimingsById[i].desc).to.be.eql(undefined);\r",
									"    });\r",
									"}\r",
									"\r",
									"pm.test(`Total (estimated) processing time: ${(totalEstimatedTime / 1000000).toFixed(3)} milliseconds`, function () {\r",
									"    pm.expect(totalEstimatedTime).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`Data preparation procesing time: ${(prcgTmDP / 1000000).toFixed(3)} milliseconds`, function () {\r",
									"    pm.expect(prcgTmDP).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`ED procesing time: ${(prcgTmED / 1000000).toFixed(3)} milliseconds`, function () {\r",
									"    pm.expect(prcgTmED).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`Slowest rule procesing time: ${(slowestRule / 1000000).toFixed(3)} milliseconds (Rule ${whichRuleIsSlowest})`, function () {\r",
									"    pm.expect(slowestRule).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`Fastest rule procesing time: ${(fastestRule / 1000000).toFixed(3)} milliseconds (Rule ${whichRuleIsFastest})`, function () {\r",
									"    pm.expect(fastestRule).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`Average rule procesing time: ${(averageRuleTime / 1000000).toFixed(3)} milliseconds`, function () {\r",
									"    pm.expect(averageRuleTime).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`Slowest typology processing time: ${(slowestTypology / 1000000).toFixed(3)} milliseconds (Typology ${resJson.result[0].report.tadpResult.typologyResult[whichTypologyIsSlowest].id})`, function () {\r",
									"    pm.expect(slowestTypology).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`Fastest typology processing time: ${(fastestTypology / 1000000).toFixed(3)} milliseconds (Typology ${resJson.result[0].report.tadpResult.typologyResult[whichTypologyIsFastest].id})`, function () {\r",
									"    pm.expect(fastestTypology).to.be.lessThan(999999999);\r",
									"});\r",
									"\r",
									"pm.test(`Average typology processing time: ${(averageTypologyTime / 1000000).toFixed(3)} milliseconds`, function () {\r",
									"    pm.expect(averageTypologyTime).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`TADProc processing time: ${(tadpTime / 1000000).toFixed(3)} milliseconds`, function () {\r",
									"    pm.expect(tadpTime).to.be.greaterThan(0);\r",
									"});\r",
									"\r",
									"pm.test(`Report status is ${expectedAlertStatus}`, function () {\r",
									"    pm.expect(resJson.result[0].report.status).to.equal(expectedAlertStatus);\r",
									"});\r",
									"\r",
									"let sortedTypologiesById = resJson.result[0].report.tadpResult.typologyResult.sort((e1, e2) => (e1.cfg > e2.cfg) ? 1 : (e1.cfg < e2.cfg) ? -1 : 0);\r",
									"\r",
									"pm.test(`Evaluation result contains ${totalExpectedTypologies} typology results`, function () {\r",
									"    pm.expect(sortedTypologiesById.length).to.equal(totalExpectedTypologies);\r",
									"});\r",
									"\r",
									"let ruleWeightingTotal = 0;\r",
									"for (let i = 0; i < sortedTypologiesById.length; i++) {\r",
									"    ruleWeightingTotal = 0;\r",
									"    for (let j = 0; j < sortedTypologiesById[i].ruleResults.length; j++) {\r",
									"        ruleWeightingTotal += sortedTypologiesById[i].ruleResults[j].wght;\r",
									"    }\r",
									"\r",
									"    pm.test(`Typology ${sortedTypologiesById[i].cfg} contains ${rulesPerTypologyCount[i]} rule results`, function () {\r",
									"        pm.expect(sortedTypologiesById[i].ruleResults.length).to.equal(rulesPerTypologyCount[i]);\r",
									"    });\r",
									"\r",
									"    pm.test(`Typology ${sortedTypologiesById[i].cfg} result (${sortedTypologiesById[i].result}) matches rule weighting total (${ruleWeightingTotal})`, function () {\r",
									"        pm.expect(sortedTypologiesById[i].result).to.equal(ruleWeightingTotal);\r",
									"    });\r",
									"\r",
									"    if (sortedTypologiesById[i].cfg == \"105@1.0.0\" && expectedAlertStatus == \"ALRT\") {\r",
									"        pm.test(`Typology ${sortedTypologiesById[i].cfg} result (${sortedTypologiesById[i].result}) breached threshold (${sortedTypologiesById[i].workflow.alertThreshold})`, function () {\r",
									"            pm.expect(sortedTypologiesById[i].result).to.be.greaterThanOrEqual(sortedTypologiesById[i].workflow.alertThreshold);\r",
									"        });\r",
									"        pm.test(`Typology ${sortedTypologiesById[i].cfg} review flag is true`, function () {\r",
									"            pm.expect(sortedTypologiesById[i].review).to.be.true;\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(`Typology ${sortedTypologiesById[i].cfg} result (${sortedTypologiesById[i].result}) did not breach threshold (${sortedTypologiesById[i].workflow.alertThreshold})`, function () {\r",
									"            pm.expect(sortedTypologiesById[i].result).to.be.lessThan(sortedTypologiesById[i].workflow.alertThreshold);\r",
									"        });\r",
									"        pm.test(`Typology ${sortedTypologiesById[i].cfg} review flag is false`, function () {\r",
									"            pm.expect(sortedTypologiesById[i].review).to.be.false;\r",
									"        });\r",
									"    }\r",
									"\r",
									"    if (interdictionTypologies.includes(sortedTypologiesById[i].cfg.substring(0,3))) {\r",
									"        pm.test(`Typology ${sortedTypologiesById[i].cfg} interdictionThreshold is greater than zero if not omitted`, function () {\r",
									"            pm.expect(sortedTypologiesById[i].workflow.interdictionThreshold).to.be.greaterThan(0);\r",
									"        });\r",
									"    } else {\r",
									"        pm.test(`Typology ${sortedTypologiesById[i].cfg} interdictionThreshold is omitted`, function () {\r",
									"            pm.expect(sortedTypologiesById[i].workflow.interdictionThreshold).to.be.eql(undefined);\r",
									"        });\r",
									"    }\r",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{arangoToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"query\": \"FOR doc in transactions FILTER doc.transaction.FIToFIPmtSts.GrpHdr.MsgId == '{{messageIdPacs002}}' RETURN doc\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{arangoUrl}}/_db/{{db_results}}/_api/cursor",
							"host": [
								"{{arangoUrl}}"
							],
							"path": [
								"_db",
								"{{db_results}}",
								"_api",
								"cursor"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"const uuid = require('uuid');",
					"const lodash = require('lodash');",
					"const debtorAgentId = \"fsp001\";",
					"const creditorAgentId = \"fsp002\";",
					"const debtorIdType = \"TAZAMA_EID\";",
					"const debtorAccountType = \"MSISDN\";",
					"const creditorIdType = \"TAZAMA_EID\";",
					"const creditorAccountType = \"MSISDN\";",
					"",
					"prep = {",
					"",
					"    /**",
					"     * Constructs a pain.001.001.11 message for initiating a customer credit transfer.",
					"     *",
					"     * @param {string} messageIdPain001 - Unique identifier for the message.",
					"     * @param {string} timestampPain001 - Timestamp of message creation.",
					"     * @param {string} debtorDoB - Date of birth of the debtor.",
					"     * @param {string} debtorId - Identifier for the debtor.",
					"     * @param {string} debtorAccountId - Account identifier for the debtor.",
					"     * @param {string} endToEndId - Unique end-to-end transaction identifier.",
					"     * @param {string} transactionPurpose - Purpose of the transaction.",
					"     * @param {string} currency - Currency code for the transaction amount.",
					"     * @param {number} amount - Transaction amount.",
					"     * @param {string} creditorId - Identifier for the creditor.",
					"     * @param {string} creditorAccountId - Account identifier for the creditor.",
					"     * @param {string} transactionDescription - Description of the transaction.",
					"     * @param {string} transactionLat - Latitude coordinate of the transaction location.",
					"     * @param {string} transactionLong - Longitude coordinate of the transaction location.",
					"     * ",
					"     * @returns {object} A pain.001.001.11 message object for customer credit transfer initiation.",
					"     */",
					"",
					"    prepPain001Msg: function (messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountIdType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountIdType, transactionDescription, transactionLat, transactionLong, dataCache) {",
					"        return {",
					"            \"TxTp\": \"pain.001.001.11\",",
					"            \"CstmrCdtTrfInitn\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPain001}`,",
					"                    \"CreDtTm\": `${timestampPain001}`,",
					"                    \"NbOfTxs\": 1,",
					"                    \"InitgPty\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1968-02-01\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": [{",
					"                                    \"Id\": \"+27730975224\",",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${debtorAccountIdType}`",
					"                                    }",
					"                                }]",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    }",
					"                },",
					"                \"PmtInf\": {",
					"                    \"PmtInfId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                    \"PmtMtd\": \"TRA\",",
					"                    \"ReqdAdvcTp\": {",
					"                        \"DbtAdvc\": {",
					"                            \"Cd\": \"ADWD\",",
					"                            \"Prtry\": \"Advice with transaction details\"",
					"                        }",
					"                    },",
					"                    \"ReqdExctnDt\": {",
					"                        \"Dt\": \"2023-06-02\",",
					"                        \"DtTm\": \"2023-06-02T07:50:57.000Z\"",
					"                    },",
					"                    \"Dbtr\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": `${debtorDoB}`,",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": [{",
					"                                    \"Id\": `${debtorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${debtorIdType}`",
					"                                    }",
					"                                }]",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"DbtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": [{",
					"                                \"Id\": `${debtorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": `${debtorAccountIdType}`",
					"                                }",
					"                            }]",
					"                        },",
					"                        \"Nm\": \"April Grant\"",
					"                    },",
					"                    \"DbtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": `${debtorAgentId}`",
					"                            }",
					"                        }",
					"                    },",
					"                    \"CdtTrfTxInf\": {",
					"                        \"PmtId\": {",
					"                            \"EndToEndId\": `${endToEndId}`",
					"                        },",
					"                        \"PmtTpInf\": {",
					"                            \"CtgyPurp\": {",
					"                                \"Prtry\": `${transactionPurpose}`",
					"                            }",
					"                        },",
					"                        \"Amt\": {",
					"                            \"InstdAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": `${currency}`",
					"                                }",
					"                            },",
					"                            \"EqvtAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": `${currency}`",
					"                                },",
					"                                \"CcyOfTrf\": `${currency}`",
					"                            }",
					"                        },",
					"                        \"ChrgBr\": \"DEBT\",",
					"                        \"CdtrAgt\": {",
					"                            \"FinInstnId\": {",
					"                                \"ClrSysMmbId\": {",
					"                                    \"MmbId\": `${creditorAgentId}`",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Cdtr\": {",
					"                            \"Nm\": \"Felicia Easton Quill\",",
					"                            \"Id\": {",
					"                                \"PrvtId\": {",
					"                                    \"DtAndPlcOfBirth\": {",
					"                                        \"BirthDt\": \"1935-05-08\",",
					"                                        \"CityOfBirth\": \"Unknown\",",
					"                                        \"CtryOfBirth\": \"ZZ\"",
					"                                    },",
					"                                    \"Othr\": [{",
					"                                        \"Id\": `${creditorId}`,",
					"                                        \"SchmeNm\": {",
					"                                            \"Prtry\": `${creditorIdType}`",
					"                                        }",
					"                                    }]",
					"                                }",
					"                            },",
					"                            \"CtctDtls\": {",
					"                                \"MobNb\": \"+27-707650428\"",
					"                            }",
					"                        },",
					"                        \"CdtrAcct\": {",
					"                            \"Id\": {",
					"                                \"Othr\": [{",
					"                                    \"Id\": `${creditorAccountId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${creditorAccountIdType}`",
					"                                    }",
					"                                }]",
					"                            },",
					"                            \"Nm\": \"Felicia Quill\"",
					"                        },",
					"                        \"Purp\": {",
					"                            \"Cd\": \"MP2P\"",
					"                        },",
					"                        \"RgltryRptg\": {",
					"                            \"Dtls\": {",
					"                                \"Tp\": \"BALANCE OF PAYMENTS\",",
					"                                \"Cd\": \"100\"",
					"                            }",
					"                        },",
					"                        \"RmtInf\": {",
					"                            \"Ustrd\": `${transactionDescription}`",
					"                        },",
					"                        \"SplmtryData\": {",
					"                            \"Envlp\": {",
					"                                \"Doc\": {",
					"                                    \"Dbtr\": {",
					"                                        \"FrstNm\": \"April\",",
					"                                        \"MddlNm\": \"Blake\",",
					"                                        \"LastNm\": \"Grant\",",
					"                                        \"MrchntClssfctnCd\": \"BLANK\"",
					"                                    },",
					"                                    \"Cdtr\": {",
					"                                        \"FrstNm\": \"Felicia\",",
					"                                        \"MddlNm\": \"Easton\",",
					"                                        \"LastNm\": \"Quill\",",
					"                                        \"MrchntClssfctnCd\": \"BLANK\"",
					"                                    },",
					"                                    \"DbtrFinSvcsPrvdrFees\": {",
					"                                        \"Ccy\": `${currency}`,",
					"                                        \"Amt\": 0.00",
					"                                    },",
					"                                    \"Xprtn\": \"2021-11-30T10:38:56.000Z\"",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                },",
					"                \"SplmtryData\": {",
					"                    \"Envlp\": {",
					"                        \"Doc\": {",
					"                            \"InitgPty\": {",
					"                                \"InitrTp\": \"CONSUMER\",",
					"                                \"Glctn\": {",
					"                                    \"Lat\": `${transactionLat}`,",
					"                                    \"Long\": `${transactionLong}`",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            },",
					"            \"DataCache\": dataCache[0]",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Constructs a pain.013.001.09 message for initiating a creditor payment activation request.",
					"     *",
					"     * @param {string} messageIdPain013 - Unique identifier for the message.",
					"     * @param {string} timestampPain013 - Timestamp of message creation.",
					"     * @param {string} debtorDoB - Date of birth of the debtor.",
					"     * @param {string} debtorId - Identifier for the debtor.",
					"     * @param {string} debtorAccountId - Account identifier for the debtor.",
					"     * @param {string} endToEndId - Unique end-to-end transaction identifier.",
					"     * @param {string} currency - Currency code for the transaction amount.",
					"     * @param {number} amount - Transaction amount.",
					"     * @param {string} creditorId - Identifier for the creditor.",
					"     * @param {string} creditorAccountId - Account identifier for the creditor.",
					"     * @param {string} transactionLat - Latitude coordinate of the transaction location.",
					"     * @param {string} transactionLong - Longitude coordinate of the transaction location.",
					"     * ",
					"     * @returns {object} A pain.013.001.09 message object for creditor payment activation request.",
					"     */",
					"",
					"    prepPain013Msg: function (messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountIdType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountIdType, transactionLat, transactionLong, dataCache) {",
					"        return {",
					"            \"TxTp\": \"pain.013.001.09\",",
					"            \"CdtrPmtActvtnReq\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPain013}`,",
					"                    \"CreDtTm\": `${timestampPain013}`,",
					"                    \"NbOfTxs\": 1,",
					"                    \"InitgPty\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1968-02-01\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": [{",
					"                                    \"Id\": \"+27730975224\",",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${debtorAccountIdType}`",
					"                                    }",
					"                                }]",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    }",
					"                },",
					"                \"PmtInf\": {",
					"                    \"PmtInfId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                    \"PmtMtd\": \"TRA\",",
					"                    \"ReqdAdvcTp\": {",
					"                        \"DbtAdvc\": {",
					"                            \"Cd\": \"ADWD\",",
					"                            \"Prtry\": \"Advice with transaction details\"",
					"                        }",
					"                    },",
					"                    \"ReqdExctnDt\": {",
					"                        \"DtTm\": \"2023-06-02T07:51:48.000Z\"",
					"                    },",
					"                    \"XpryDt\": {",
					"                        \"DtTm\": \"2021-11-30T10:38:56.000Z\"",
					"                    },",
					"                    \"Dbtr\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": `${debtorDoB}`,",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": [{",
					"                                    \"Id\": `${debtorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${debtorIdType}`",
					"                                    }",
					"                                }]",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"DbtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": [{",
					"                                \"Id\": `${debtorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": `${debtorAccountIdType}`",
					"                                }",
					"                            }]",
					"                        },",
					"                        \"Nm\": \"April Grant\"",
					"                    },",
					"                    \"DbtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": `${debtorAgentId}`",
					"                            }",
					"                        }",
					"                    },",
					"                    \"CdtTrfTxInf\": {",
					"                        \"PmtId\": {",
					"                            \"EndToEndId\": `${endToEndId}`",
					"                        },",
					"                        \"PmtTpInf\": {",
					"                            \"CtgyPurp\": {",
					"                                \"Prtry\": \"TRANSFER BLANK\"",
					"                            }",
					"                        },",
					"                        \"Amt\": {",
					"                            \"InstdAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": `${currency}`",
					"                                }",
					"                            },",
					"                            \"EqvtAmt\": {",
					"                                \"Amt\": {",
					"                                    \"Amt\": amount,",
					"                                    \"Ccy\": `${currency}`",
					"                                },",
					"                                \"CcyOfTrf\": `${currency}`",
					"                            }",
					"                        },",
					"                        \"ChrgBr\": \"DEBT\",",
					"                        \"CdtrAgt\": {",
					"                            \"FinInstnId\": {",
					"                                \"ClrSysMmbId\": {",
					"                                    \"MmbId\": `${creditorAgentId}`",
					"                                }",
					"                            }",
					"                        },",
					"                        \"Cdtr\": {",
					"                            \"Nm\": \"Felicia Easton Quill\",",
					"                            \"Id\": {",
					"                                \"PrvtId\": {",
					"                                    \"DtAndPlcOfBirth\": {",
					"                                        \"BirthDt\": \"1935-05-08\",",
					"                                        \"CityOfBirth\": \"Unknown\",",
					"                                        \"CtryOfBirth\": \"ZZ\"",
					"                                    },",
					"                                    \"Othr\": [{",
					"                                        \"Id\": `${creditorId}`,",
					"                                        \"SchmeNm\": {",
					"                                            \"Prtry\": `${creditorIdType}`",
					"                                        }",
					"                                    }]",
					"                                }",
					"                            },",
					"                            \"CtctDtls\": {",
					"                                \"MobNb\": \"+27-707650428\"",
					"                            }",
					"                        },",
					"                        \"CdtrAcct\": {",
					"                            \"Id\": {",
					"                                \"Othr\": [{",
					"                                    \"Id\": `${creditorAccountId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${creditorAccountIdType}`",
					"                                    }",
					"                                }]",
					"                            },",
					"                            \"Nm\": \"Felicia Quill\"",
					"                        },",
					"                        \"Purp\": {",
					"                            \"Cd\": \"MP2P\"",
					"                        },",
					"                        \"RgltryRptg\": {",
					"                            \"Dtls\": {",
					"                                \"Tp\": \"BALANCE OF PAYMENTS\",",
					"                                \"Cd\": \"100\"",
					"                            }",
					"                        },",
					"                        \"SplmtryData\": {",
					"                            \"Envlp\": {",
					"                                \"Doc\": {",
					"                                    \"PyeeRcvAmt\": {",
					"                                        \"Amt\": {",
					"                                            \"Amt\": 0.00,",
					"                                            \"Ccy\": `${currency}`",
					"                                        }",
					"                                    },",
					"                                    \"PyeeFinSvcsPrvdrFee\": {",
					"                                        \"Amt\": {",
					"                                            \"Amt\": 0.00,",
					"                                            \"Ccy\": `${currency}`",
					"                                        }",
					"                                    },",
					"                                    \"PyeeFinSvcsPrvdrComssn\": {",
					"                                        \"Amt\": {",
					"                                            \"Amt\": 0.00,",
					"                                            \"Ccy\": `${currency}`",
					"                                        }",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                },",
					"                \"SplmtryData\": {",
					"                    \"Envlp\": {",
					"                        \"Doc\": {",
					"                            \"InitgPty\": {",
					"                                \"Glctn\": {",
					"                                    \"Lat\": `${transactionLat}`,",
					"                                    \"Long\": `${transactionLong}`",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            },",
					"            \"DataCache\": dataCache[0]",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Constructs a pacs.008.001.10 message for initiating a financial institution to financial institution customer credit transfer.",
					"     *",
					"     * @param {string} messageIdPacs008 - Unique identifier for the message.",
					"     * @param {string} timestampPacs008 - Timestamp of message creation.",
					"     * @param {string} endToEndId - Unique end-to-end transaction identifier.",
					"     * @param {string} currency - Currency code for the transaction amount.",
					"     * @param {number} amount - Transaction amount.",
					"     * @param {string} debtorDoB - Date of birth of the debtor.",
					"     * @param {string} debtorId - Identifier for the debtor.",
					"     * @param {string} debtorAccountId - Account identifier for the debtor.",
					"     * @param {string} creditorId - Identifier for the creditor.",
					"     * @param {string} creditorAccountId - Account identifier for the creditor.",
					"     * @param {string} transactionPurpose - Purpose of the transaction.",
					"     * @param {string} transactionDescription - Description of the transaction.",
					"     * @param {string} transactionLat - Latitude coordinate of the transaction location.",
					"     * @param {string} transactionLong - Longitude coordinate of the transaction location.",
					"     * ",
					"     * @returns {object} A pacs.008.001.10 message object for financial institution to financial institution customer credit transfer.",
					"     */",
					"",
					"    prepPacs008Msg: function (messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountIdType, creditorId, creditorIdType, creditorAccountId, creditorAccountIdType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache) {",
					"",
					"        messageBody = {",
					"            \"TxTp\": \"pacs.008.001.10\",",
					"            \"FIToFICstmrCdtTrf\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPacs008}`,",
					"                    \"CreDtTm\": `${timestampPacs008}`,",
					"                    \"NbOfTxs\": 1,",
					"                    \"SttlmInf\": {",
					"                        \"SttlmMtd\": \"CLRG\"",
					"                    }",
					"                },",
					"                \"CdtTrfTxInf\": {",
					"                    \"PmtId\": {",
					"                        \"InstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                        \"EndToEndId\": `${endToEndId}`",
					"                    },",
					"                    \"IntrBkSttlmAmt\": {",
					"                        \"Amt\": {",
					"                            \"Amt\": amount,",
					"                            \"Ccy\": `${currency}`",
					"                        }",
					"                    },",
					"                    \"InstdAmt\": {",
					"                        \"Amt\": {",
					"                            \"Amt\": amount,",
					"                            \"Ccy\": `${currency}`",
					"                        }",
					"                    },",
					"                    \"ChrgBr\": \"DEBT\",",
					"                    \"ChrgsInf\": {",
					"                        \"Amt\": {",
					"                            \"Amt\": 0.00,",
					"                            \"Ccy\": `${currency}`",
					"                        },",
					"                        \"Agt\": {",
					"                            \"FinInstnId\": {",
					"                                \"ClrSysMmbId\": {",
					"                                    \"MmbId\": `${debtorAgentId}`",
					"                                }",
					"                            }",
					"                        }",
					"                    },",
					"                    \"InitgPty\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1968-02-01\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": [{",
					"                                    \"Id\": \"+27730975224\",",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${debtorAccountIdType}`",
					"                                    }",
					"                                }]",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"Dbtr\": {",
					"                        \"Nm\": \"April Blake Grant\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": `${debtorDoB}`,",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": [{",
					"                                    \"Id\": `${debtorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${debtorIdType}`",
					"                                    }",
					"                                }]",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-730975224\"",
					"                        }",
					"                    },",
					"                    \"DbtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": [{",
					"                                \"Id\": `${debtorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": `${debtorAccountIdType}`",
					"                                }",
					"                            }]",
					"                        },",
					"                        \"Nm\": \"April Grant\"",
					"                    },",
					"                    \"DbtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": `${debtorAgentId}`",
					"                            }",
					"                        }",
					"                    },",
					"                    \"CdtrAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": `${creditorAgentId}`",
					"                            }",
					"                        }",
					"                    },",
					"                    \"Cdtr\": {",
					"                        \"Nm\": \"Felicia Easton Quill\",",
					"                        \"Id\": {",
					"                            \"PrvtId\": {",
					"                                \"DtAndPlcOfBirth\": {",
					"                                    \"BirthDt\": \"1935-05-08\",",
					"                                    \"CityOfBirth\": \"Unknown\",",
					"                                    \"CtryOfBirth\": \"ZZ\"",
					"                                },",
					"                                \"Othr\": [{",
					"                                    \"Id\": `${creditorId}`,",
					"                                    \"SchmeNm\": {",
					"                                        \"Prtry\": `${creditorIdType}`",
					"                                    }",
					"                                }]",
					"                            }",
					"                        },",
					"                        \"CtctDtls\": {",
					"                            \"MobNb\": \"+27-707650428\"",
					"                        }",
					"                    },",
					"                    \"CdtrAcct\": {",
					"                        \"Id\": {",
					"                            \"Othr\": [{",
					"                                \"Id\": `${creditorAccountId}`,",
					"                                \"SchmeNm\": {",
					"                                    \"Prtry\": `${creditorAccountIdType}`",
					"                                }",
					"                            }]",
					"                        },",
					"                        \"Nm\": \"Felicia Quill\"",
					"                    },",
					"                    \"Purp\": {",
					"                        \"Cd\": `${transactionPurpose}`",
					"                    }",
					"                },",
					"                \"RgltryRptg\": {",
					"                    \"Dtls\": {",
					"                        \"Tp\": \"BALANCE OF PAYMENTS\",",
					"                        \"Cd\": \"100\"",
					"                    }",
					"                },",
					"                \"RmtInf\": {",
					"                    \"Ustrd\": `${transactionDescription}`",
					"                },",
					"                \"SplmtryData\": {",
					"                    \"Envlp\": {",
					"                        \"Doc\": {",
					"                            \"Xprtn\": \"2021-11-30T10:38:56.000Z\",",
					"                            \"InitgPty\": {",
					"                                \"Glctn\":",
					"                                {",
					"                                    \"Lat\": `${transactionLat}`,",
					"                                    \"Long\": `${transactionLong}`",
					"                                }",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            },",
					"            \"DataCache\": dataCache[0]",
					"        }",
					"",
					"        return messageBody;",
					"    },",
					"",
					"    /**",
					"     * Constructs a pacs.002.001.12 message for financial institution to financial institution payment status reporting.",
					"     *",
					"     * @param {string} messageIdPacs002 - Unique identifier for the message.",
					"     * @param {string} timestampPacs002 - Timestamp of message creation.",
					"     * @param {string} endToEndId - Unique end-to-end transaction identifier.",
					"     * @param {string} pacs002Sts - Transaction status.",
					"     * ",
					"     * @returns {object} A pacs.002.001.12 message object for financial institution to financial institution payment status reporting.",
					"     */",
					"",
					"    prepPacs002Msg: function (messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache) {",
					"        return {",
					"            \"TxTp\": \"pacs.002.001.12\",",
					"            \"FIToFIPmtSts\": {",
					"                \"GrpHdr\": {",
					"                    \"MsgId\": `${messageIdPacs002}`,",
					"                    \"CreDtTm\": `${timestampPacs002}`",
					"                },",
					"                \"TxInfAndSts\": {",
					"                    \"OrgnlInstrId\": \"5ab4fc7355de4ef8a75b78b00a681ed2\",",
					"                    \"OrgnlEndToEndId\": `${endToEndId}`,",
					"                    \"TxSts\": `${pacs002Sts}`,",
					"                    \"ChrgsInf\": [",
					"                        {",
					"                            \"Amt\": {",
					"                                \"Amt\": 0.00,",
					"                                \"Ccy\": \"USD\"",
					"                            },",
					"                            \"Agt\": {",
					"                                \"FinInstnId\": {",
					"                                    \"ClrSysMmbId\": {",
					"                                        \"MmbId\": `${debtorAgentId}`",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        {",
					"                            \"Amt\": {",
					"                                \"Amt\": 0.00,",
					"                                \"Ccy\": \"USD\"",
					"                            },",
					"                            \"Agt\": {",
					"                                \"FinInstnId\": {",
					"                                    \"ClrSysMmbId\": {",
					"                                        \"MmbId\": `${debtorAgentId}`",
					"                                    }",
					"                                }",
					"                            }",
					"                        },",
					"                        {",
					"                            \"Amt\": {",
					"                                \"Amt\": 0.00,",
					"                                \"Ccy\": \"USD\"",
					"                            },",
					"                            \"Agt\": {",
					"                                \"FinInstnId\": {",
					"                                    \"ClrSysMmbId\": {",
					"                                        \"MmbId\": `${creditorAgentId}`",
					"                                    }",
					"                                }",
					"                            }",
					"                        }",
					"                    ],",
					"                    \"AccptncDtTm\": \"2023-06-02T07:52:31.000Z\",",
					"                    \"InstgAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": `${debtorAgentId}`",
					"                            }",
					"                        }",
					"                    },",
					"                    \"InstdAgt\": {",
					"                        \"FinInstnId\": {",
					"                            \"ClrSysMmbId\": {",
					"                                \"MmbId\": `${creditorAgentId}`",
					"                            }",
					"                        }",
					"                    }",
					"                }",
					"            },",
					"            \"DataCache\": dataCache[0]",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Constructs an array of graph entities for a debtor and a creditor.",
					"     *",
					"     * @param {string} debtorId - Identifier for the debtor.",
					"     * @param {string} creditorId - Identifier for the creditor.",
					"     * @param {string} timestamp - Timestamp of entity creation.",
					"     * ",
					"     * @returns {Array} An array of graph entities, each containing an identifier and a creation timestamp.",
					"     */",
					"",
					"    prepGraphEntities: function (debtorId, creditorId, timestamp) {",
					"        return [{",
					"            \"_key\": `${debtorId}`,",
					"            \"Id\": `${debtorId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        }, {",
					"            \"_key\": `${creditorId}`,",
					"            \"Id\": `${creditorId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        }]",
					"    },",
					"",
					"    /**",
					"     * Constructs an array of graph relationships between account holders and their accounts.",
					"     *",
					"     * @param {string} entitiesPrefix - Prefix for entity identifiers in the graph.",
					"     * @param {string} accountsPrefix - Prefix for account identifiers in the graph.",
					"     * @param {string} debtorId - Identifier for the debtor.",
					"     * @param {string} debtorAccountId - Account identifier for the debtor.",
					"     * @param {string} creditorId - Identifier for the creditor.",
					"     * @param {string} creditorAccountId - Account identifier for the creditor.",
					"     * @param {string} timestamp - Timestamp of relationship creation.",
					"     * ",
					"     * @returns {Array} An array of graph relationships, each connecting an account holder to their account.",
					"     */",
					"",
					"    prepGraphAccountHolders: function (entitiesPrefix, accountsPrefix, debtorId, debtorAccountId, creditorId, creditorAccountId, timestamp) {",
					"        return [{",
					"            \"_key\": `${debtorId}` + `${debtorAccountId}`,",
					"            \"_from\": `${entitiesPrefix}` + `${debtorId}`,",
					"            \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        },",
					"        {",
					"            \"_key\": `${creditorId}` + `${creditorAccountId}`,",
					"            \"_from\": `${entitiesPrefix}` + `${creditorId}`,",
					"            \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"            \"CreDtTm\": `${timestamp}`",
					"        }]",
					"    },",
					"",
					"    /**",
					"     * Constructs an array of graph nodes for debtor and creditor accounts.",
					"     *",
					"     * @param {string} debtorAccountId - Account identifier for the debtor.",
					"     * @param {string} creditorAccountId - Account identifier for the creditor.",
					"     * ",
					"     * @returns {Array} An array of graph nodes, each representing an account with a unique identifier.",
					"     */",
					"",
					"    prepGraphAccounts: function (debtorAccountId, creditorAccountId) {",
					"        return [{",
					"            \"_key\": debtorAccountId,",
					"        }, {",
					"            \"_key\": creditorAccountId,",
					"        }]",
					"    },",
					"",
					"    /**",
					"     * Constructs an array of graph transactions between debtor and creditor accounts, including various transaction types.",
					"     *",
					"     * @param {string} accountsPrefix - Prefix for account identifiers in the graph.",
					"     * @param {string} debtorAccountId - Account identifier for the debtor.",
					"     * @param {string} creditorAccountId - Account identifier for the creditor.",
					"     * @param {string} currency - Currency code for the transaction amount.",
					"     * @param {number} amount - Transaction amount.",
					"     * @param {string} endToEndId - Unique end-to-end transaction identifier.",
					"     * @param {string} timestampPacs008 - Timestamp of pacs.008.001.10 message creation.",
					"     * @param {string} messageIdPacs008 - Unique identifier for the pacs.008.001.10 message.",
					"     * @param {string} timestampPacs002 - Timestamp of pacs.002.001.12 message creation.",
					"     * @param {string} messageIdPacs002 - Unique identifier for the pacs.002.001.12 message.",
					"     * @param {string} pacs002Sts - Transaction status for pacs.002.001.12 message.",
					"     * @param {string} timestampPain001 - Timestamp of pain.001.001.11 message creation.",
					"     * @param {string} messageIdPain001 - Unique identifier for the pain.001.001.11 message.",
					"     * @param {string} timestampPain013 - Timestamp of pain.013.001.09 message creation.",
					"     * @param {string} messageIdPain013 - Unique identifier for the pain.013.001.09 message.",
					"     * ",
					"     * @returns {Array} An array of graph transactions, each representing a transaction between debtor and creditor accounts.",
					"     */",
					"",
					"    prepGraphTransactions: function (accountsPrefix, debtorAccountId, creditorAccountId, currency, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002Sts, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013) {",
					"",
					"        var transactions = [];",
					"",
					"        if (typeof timestampPain001 !== \"undefined\") {",
					"            transactions.push({",
					"                \"_from\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                \"TxTp\": \"pain.001.001.11\",",
					"                \"CreDtTm\": `${timestampPain001}`,",
					"                \"Amt\": amount,",
					"                \"Ccy\": `${currency}`,",
					"                \"PmtInfId\": `${messageIdPain001}`,",
					"                \"EndToEndId\": `${endToEndId}`",
					"            });",
					"            transactions.push({",
					"                \"_from\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                \"TxTp\": \"pain.013.001.09\",",
					"                \"CreDtTm\": `${timestampPain013}`,",
					"                \"Amt\": amount,",
					"                \"Ccy\": `${currency}`,",
					"                \"PmtInfId\": `${messageIdPain013}`,",
					"                \"EndToEndId\": `${endToEndId}`",
					"            });",
					"        }",
					"",
					"        transactions.push({",
					"            \"_from\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"            \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"            \"TxTp\": \"pacs.008.001.10\",",
					"            \"CreDtTm\": `${timestampPacs008}`,",
					"            \"Amt\": amount,",
					"            \"Ccy\": `${currency}`,",
					"            \"PmtInfId\": `${messageIdPacs008}`,",
					"            \"EndToEndId\": `${endToEndId}`",
					"        });",
					"",
					"        if (typeof timestampPacs002 !== \"undefined\") {",
					"            transactions.push({",
					"                \"_from\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                \"TxTp\": \"pacs.002.001.12\",",
					"                \"TxSts\": `${pacs002Sts}`,",
					"                \"CreDtTm\": `${timestampPacs002}`,",
					"                \"PmtInfId\": `${messageIdPacs002}`,",
					"                \"EndToEndId\": `${endToEndId}`",
					"            });",
					"        }",
					"",
					"        return transactions",
					"    }",
					"}",
					"",
					"config = {",
					"",
					"    /**",
					"    * Asynchronously deletes a specific rule configuration from the database.",
					"    *",
					"    * @param {string} ruleId - Mandatory. The identifier of the rule whose configuration is to be deleted.",
					"    * @param {string} ruleConfigVersion - Mandatory. The version of the rule configuration to be deleted.",
					"    */",
					"",
					"    deleteRuleConfig: async function (ruleId, ruleConfigVersion) {",
					"",
					"        const queryString = `FOR cfg IN configuration",
					"      FILTER cfg.id == '${ruleId}'",
					"      AND cfg.cfg == '${ruleConfigVersion}'",
					"      REMOVE cfg._key IN configuration`;",
					"",
					"        const configPostRequest = {",
					"            url: `${_pm.environment.get('arangoUrl')}/_db/${_pm.environment.get('db_config_all')}/_api/cursor`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    query: queryString",
					"                })",
					"            }",
					"        };",
					"",
					"        await _pm.sendRequest(configPostRequest, (error, response) => {",
					"            console.log(error ? error : response.json());",
					"        });",
					"    },",
					"",
					"    /**",
					"     * Asynchronously creates a new rule configuration in the database.",
					"     *",
					"     * @param {object} ruleConfig - Mandatory. The configuration object for the rule to be created.",
					"     */",
					"",
					"",
					"    createRuleConfig: async function (ruleConfig) {",
					"",
					"        const configPostRequest = {",
					"            url: `${_pm.environment.get('arangoUrl')}/_db/${_pm.environment.get('db_config_all')}/_api/document/${_pm.environment.get('db_config_rules')}?overwrite=true`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(ruleConfig)",
					"            },",
					"        };",
					"",
					"        await _pm.sendRequest(configPostRequest, (error, response) => {",
					"            console.log(error ? error : response.json());",
					"        });",
					"    },",
					"",
					"    /**",
					"     * Asynchronously recreates a rule configuration by removing the existing configuration and creating a new one.",
					"     *",
					"     * @param {string} ruleId - Mandatory. The identifier of the rule whose configuration is to be recreated.",
					"     * @param {string} ruleConfigVersion - Mandatory. The version of the rule configuration.",
					"     * @param {object} ruleConfig - Mandatory. The new configuration object for the rule.",
					"     */",
					"",
					"    recreateRuleConfig: async function (ruleId, ruleConfigVersion, ruleConfig) {",
					"",
					"        const queryString = `FOR cfg IN configuration",
					"      FILTER cfg.id == '${ruleId}'",
					"      AND cfg.cfg == '${ruleConfigVersion}'",
					"      REMOVE cfg._key IN configuration`;",
					"",
					"        const configPostRequest = {",
					"            url: `${_pm.environment.get('arangoUrl')}/_db/${_pm.environment.get('db_config_all')}/_api/cursor`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify({",
					"                    query: queryString",
					"                })",
					"            }",
					"        };",
					"",
					"        await _pm.sendRequest(configPostRequest, (error, response) => {",
					"            console.log(error ? error : response.json());",
					"            utils.createRuleConfig(ruleConfig);",
					"        });",
					"    }",
					"}",
					"",
					"utils = {",
					"    // https://community.postman.com/t/how-to-reuse-function-in-2022/39077/4",
					"    setPm: function (scriptPm) {",
					"        try {",
					"            if (!scriptPm) {",
					"                throw new Error(\"The pm object is not provided.\");",
					"            }",
					"            _pm = scriptPm;",
					"            console.log(\"pm object successfully set.\");",
					"        } catch (error) {",
					"            console.error(\"Failed to set pm object:\", error.message);",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Converts a time unit to its equivalent in milliseconds.",
					"     * ",
					"     * Example: `weekInMilliseconds = 7 * utils.timeframe('d');`",
					"     *",
					"     * @param {string} unit - The time unit to convert. Supported units are 'd'/'days', 'h'/'hours', 'm'/'minutes', and 's'/'seconds'.",
					"     * @returns {number} The number of milliseconds corresponding to the given time unit.",
					"     */",
					"",
					"    timeframe: function (unit) {",
					"        switch (unit) {",
					"            case 'd':",
					"            case 'days':",
					"                milliseconds = 86400000;",
					"                break;",
					"            case 'h':",
					"            case 'hours':",
					"                milliseconds = 3600000;",
					"                break;",
					"            case 'm':",
					"            case 'minutes':",
					"                milliseconds = 60000;",
					"                break;",
					"            case 's':",
					"            case 'seconds':",
					"                milliseconds = 1000;",
					"                break;",
					"            default: milliseconds = 0;",
					"        }",
					"        return milliseconds;",
					"    },",
					"",
					"    /**",
					"     * Generates a UUID (Universally Unique Identifier) in ISO format by removing hyphens from a standard UUID.",
					"     *",
					"     * @returns {string} A UUID in ISO format without hyphens.",
					"     */",
					"",
					"    createISOUUID: function () {",
					"        return uuid.v4().replace(/-/g, '');",
					"    },",
					"",
					"    /**",
					"     * Logs a structured message containing payment transaction details to the console.",
					"     * This function facilitates easy tracking and debugging of transaction data by displaying it in a structured JSON format.",
					"     *",
					"     * @param {Object} dataCache - An object containing all the necessary transaction data.",
					"     *   @param {string} data.dbtrId - Debtor's identifier.",
					"     *   @param {string} data.cdtrId - Creditor's identifier.",
					"     *   @param {string} data.dbtrAcctId - Debtor's account identifier.",
					"     *   @param {string} data.cdtrAcctId - Creditor's account identifier.",
					"     *   @param {string} data.creDtTm - Creation date and time of the transaction, formatted as ISO 8601.",
					"     *   @param {number} data.amt - Transaction amount.",
					"     *   @param {string} data.curr - Currency of the transaction amount.",
					"     *   @param {string} data.endToEndId - End-to-end identifier that uniquely references the transaction.",
					"     *",
					"     * @example",
					"     * logDataCache({",
					"     *   dbtrId: '123',",
					"     *   cdtrId: '456',",
					"     *   dbtrAcctId: '78910',",
					"     *   cdtrAcctId: '111213',",
					"     *   creDtTm: '2020-12-31T23:59:59',",
					"     *   amt: 100.00,",
					"     *   curr: 'USD',",
					"     *   endToEndId: 'E2E123456789'",
					"     * });",
					"     */",
					"",
					"    logDataCache: function (dataCache) {",
					"        console.log(JSON.stringify({ DataCache: dataCache }, null, 4));",
					"    },",
					"",
					"    /**",
					"     * Creates multiple new accounts for a given entity and updates the graph database with the new accounts and their relationships to the entity.",
					"     *",
					"     * @param {string} entityId - Mandatory. Identifier for the entity to which the accounts will be associated.",
					"     * @param {number|null|undefined} [numberOfAccounts=0] - The number of new accounts to create. Defaults to 0.",
					"     */",
					"",
					"    createMoreAccounts: function (entityId, numberOfAccounts) {",
					"",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        numberOfAccounts = numberOfAccounts ? numberOfAccounts : 0;",
					"",
					"        let timestamp = new Date(new Date(Date.now())).toISOString();",
					"",
					"        const accountIds = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accountIds.push('acct_' + uuid.v4().replace(/-/g, ''));",
					"        }",
					"",
					"        const accounts = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accounts.push({ \"_key\": accountIds[step] })",
					"        }",
					"",
					"        const account_holders = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            account_holders.push({",
					"                \"_key\": `${entityId}+${accountIds[step]}`,",
					"                \"_from\": `${entitiesPrefix}` + `${entityId}`,",
					"                \"_to\": `${accountsPrefix}` + `${accountIds[step]}`,",
					"                \"CreDtTm\": timestamp",
					"            });",
					"        }",
					"",
					"        postRequests = [{",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(accounts)",
					"            }",
					"        }, {",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(account_holders)",
					"            }",
					"        }];",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"    },",
					"",
					"    /**",
					"     * Creates a single new account for a given entity and updates the graph database with the new account and its relationship to the entity.",
					"     *",
					"     * @param {string} entityId - Mandatory. Identifier for the entity to which the account will be associated.",
					"     * @param {string} accountId - Mandatory. Identifier for the new account.",
					"     * @param {string|null|undefined} [timestamp] - Timestamp for the creation of the account. Defaults to the current timestamp.",
					"     */",
					"",
					"    createSingleAccount: function (entityId, accountId, timestamp) {",
					"",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        const numberOfAccounts = 1;",
					"",
					"        timestamp = timestamp ? timestamp : new Date(new Date(Date.now())).toISOString();",
					"",
					"        const accountIds = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accountIds.push(accountId);",
					"        }",
					"",
					"        const accounts = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            accounts.push({ \"_key\": accountIds[step] })",
					"        }",
					"",
					"        const account_holders = [];",
					"        for (let step = 0; step < numberOfAccounts; step++) {",
					"            account_holders.push({",
					"                \"_from\": `${entitiesPrefix}` + `${entityId}`,",
					"                \"_to\": `${accountsPrefix}` + `${accountIds[step]}`,",
					"                \"CreDtTm\": `${timestamp}`",
					"            });",
					"        }",
					"",
					"        postRequests = [{",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(accounts)",
					"            }",
					"        }, {",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(account_holders)",
					"            }",
					"        }];",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"    },",
					"",
					"    /**",
					"     * Creates a new entity in the graph database with the given entity identifier.",
					"     *",
					"     * @param {string} entityId - Mandatory. Identifier for the new entity.",
					"     */",
					"",
					"    createEntity: function (entityId) {",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_entities = _pm.environment.get('db_coll_graph_entities');",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Essential defaults",
					"        const timestamp = new Date(new Date(Date.now())).toISOString();",
					"",
					"        const entities = [{",
					"            \"_key\": entityId,",
					"            \"Id\": entityId,",
					"            \"CreDtTm\": timestamp",
					"        }];",
					"",
					"        postRequests = [{",
					"            url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"            method: 'POST',",
					"            header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"            body: {",
					"                mode: 'raw',",
					"                raw: JSON.stringify(entities)",
					"            }",
					"        }];",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"    },",
					"",
					"    /**",
					"     * Creates a new set of transactions for testing purposes, including all necessary data and database operations.",
					"     * The transaction set will include pain.001/013 messages if the environment variable activePain001 = true.",
					"     * The transaction set will contain a pacs.008 and a pacs.002 message.",
					"     * The messages in the set will be linked through the same EndToEndId.",
					"     * The function stashes created data in global variables can be retrieved with the `pm.globals.get()` method.",
					"     *",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps. Defaults to 0.",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction amount. Defaults to 'XTS'.",
					"     * @param {number|null|undefined} [amount] - Transaction amount. Defaults to a random value between 10 and 1000.",
					"     * @param {string|null|undefined} [transactionDescription='Generic payment description'] - Description of the transaction. Defaults to 'Generic payment description'.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Transaction status for pacs.002.001.12 message. Defaults to 'ACCC' (a successful transaction).",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor. Defaults to 25.",
					"     * @param {string|null|undefined} [transactionPurpose] - Purpose of the transaction. Defaults to 'TRANSFER' if pain.001/013 ingestion is enabled, otherwise 'MP2P'.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude coordinate of the transaction location. Defaults to -3.1609.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude coordinate of the transaction location. Defaults to 38.3588.",
					"     */",
					"",
					"    createNewTransactionSet: function (timestampEpoch, currency, amount, transactionDescription, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"        const db_coll_graph_entities = _pm.environment.get('db_coll_graph_entities');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"        }",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = 'dbtr_' + uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = 'dbtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let creditorId = 'cdtr_' + uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = 'cdtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"        var pain001;",
					"        var pain013;",
					"        var baseCreDtTm;",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            baseCreDtTm = timestampPain001;",
					"        } else {",
					"            baseCreDtTm = timestampPacs008;",
					"        }",
					"",
					"        var debtorKey = debtorId + debtorIdType;",
					"        var debtorAccountKey = debtorAccountId + debtorAccountType + debtorAgentId;",
					"        var creditorKey = creditorId + creditorIdType;",
					"        var creditorAccountKey = creditorAccountId + debtorAccountType + creditorAgentId;",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorKey}`,",
					"            \"cdtrId\": `${creditorKey}`,",
					"            \"dbtrAcctId\": `${debtorAccountKey}`,",
					"            \"cdtrAcctId\": `${creditorAccountKey}`,",
					"            \"creDtTm\": `${baseCreDtTm}`,",
					"            \"amt\": {",
					"                \"amt\": amount,",
					"                \"ccy\": `${currency}`",
					"            }",
					"        }];",
					"",
					"        if (activePain001) {",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"            pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"        }",
					"",
					"        const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"        const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"        const pacs002TriggerPayload = pacs002;",
					"",
					"        const accounts = prep.prepGraphAccounts(debtorAccountKey, creditorAccountKey);",
					"",
					"        var postRequests = [];",
					"        var account_holders = [];",
					"        var entities = [];",
					"        var transactions = [];",
					"",
					"        if (activePain001) {",
					"            entities = prep.prepGraphEntities(debtorKey, creditorKey, timestampPain001);",
					"            account_holders = prep.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorKey, debtorAccountKey, creditorKey, creditorAccountKey, timestampPain001);",
					"            transactions = prep.prepGraphTransactions(accountsPrefix, debtorAccountKey, creditorAccountKey, currency, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002Sts, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain001)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain013)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs002)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"        } else {",
					"            entities = prep.prepGraphEntities(debtorKey, creditorKey, timestampPacs008);",
					"            account_holders = prep.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorKey, debtorAccountKey, creditorKey, creditorAccountKey, timestampPacs008);",
					"            transactions = prep.prepGraphTransactions(accountsPrefix, debtorAccountKey, creditorAccountKey, currency, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002Sts);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs002)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"            console.log(postRequests);",
					"        }",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"",
					"        console.log('pacs.002 trigger payload: ' + JSON.stringify(pacs002TriggerPayload[0]));",
					"",
					"        _pm.globals.set(\"pacs002\", JSON.stringify(pacs002TriggerPayload[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002Sts', pacs002Sts);",
					"        _pm.globals.set('currency', currency);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        _pm.globals.set('baseTimestamp', timestampPacs008);",
					"        _pm.globals.set('debtorKey', debtorKey);",
					"        _pm.globals.set('debtorAccountKey', debtorAccountKey);",
					"        _pm.globals.set('creditorKey', creditorKey);",
					"        _pm.globals.set('creditorAccountKey', creditorAccountKey);",
					"        if (activePain001) {",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"            _pm.globals.set('baseTimestamp', timestampPain001);",
					"        }",
					"",
					"        this.logDataCache(dataCache[0]);",
					"",
					"    },",
					"",
					"    /**",
					"     * Creates a new set of transactions for testing purposes, excluding pacs.002.001.12 messages, and includes all necessary data and database operations.",
					"     * The transaction set will include pain.001/013 messages if the environment variable activePain001 = true.",
					"     * The transaction set will contain a pacs.008 message.",
					"     * The messages in the set will be linked through the same EndToEndId.",
					"     * The function stashes created data in global variables can be retrieved with the `pm.globals.get()` method.",
					"     *",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps. Defaults to 0.",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction amount. Defaults to 'XTS'.",
					"     * @param {number|null|undefined} [amount] - Transaction amount. Defaults to a random value between 10 and 1000.",
					"     * @param {string|null|undefined} [transactionDescription='Generic payment description'] - Description of the transaction. Defaults to 'Generic payment description'.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Transaction status for pacs.002.001.12 message. Defaults to 'ACCC'.",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor. Defaults to 25.",
					"     * @param {string|null|undefined} [transactionPurpose] - Purpose of the transaction. Defaults to 'TRANSFER' if pain.001/013 ingestion is enabled, otherwise 'MP2P'.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude coordinate of the transaction location. Defaults to -3.1609.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude coordinate of the transaction location. Defaults to 38.3588.",
					"     */",
					"",
					"    createNewTransactionSetWithoutPacs002: function (timestampEpoch, currency, amount, transactionDescription, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"        const db_coll_graph_entities = _pm.environment.get('db_coll_graph_entities');",
					"        const db_coll_graph_accounts = _pm.environment.get('db_coll_graph_accounts');",
					"        const db_coll_graph_account_holders = _pm.environment.get('db_coll_graph_account_holders');",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"        const entitiesPrefix = 'entities/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = 'dbtr_' + uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = 'dbtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let creditorId = 'cdtr_' + uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = 'cdtrAcct_' + uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"        var baseCreDtTm;",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            baseCreDtTm = timestampPain001;",
					"        } else {",
					"            baseCreDtTm = timestampPacs008;",
					"        }",
					"",
					"        var debtorKey = debtorId + debtorIdType;",
					"        var debtorAccountKey = debtorAccountId + debtorAccountType + debtorAgentId;",
					"        var creditorKey = creditorId + creditorIdType;",
					"        var creditorAccountKey = creditorAccountId + debtorAccountType + creditorAgentId;",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorKey}`,",
					"            \"cdtrId\": `${creditorKey}`,",
					"            \"dbtrAcctId\": `${debtorAccountKey}`,",
					"            \"cdtrAcctId\": `${creditorAccountKey}`,",
					"            \"creDtTm\": `${baseCreDtTm}`,",
					"            \"amt\": {",
					"                \"amt\": amount,",
					"                \"ccy\": `${currency}`",
					"            }",
					"        }];",
					"",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"            pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"        }",
					"",
					"        const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"        const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"        const pacs002TriggerPayload = pacs002;",
					"",
					"        const accounts = prep.prepGraphAccounts(debtorAccountKey, creditorAccountKey);",
					"",
					"        var postRequests = [];",
					"        var account_holders = [];",
					"        var entities = [];",
					"        var transactions = [];",
					"",
					"        if (activePain001) {",
					"            entities = prep.prepGraphEntities(debtorKey, creditorKey, timestampPain001);",
					"            account_holders = prep.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorKey, debtorAccountKey, creditorKey, creditorAccountKey, timestampPain001);",
					"            transactions = prep.prepGraphTransactions(accountsPrefix, debtorAccountKey, creditorAccountKey, currency, amount, endToEndId, timestampPacs008, messageIdPacs008, undefined, undefined, undefined, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain001)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pain013)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"        } else {",
					"            entities = prep.prepGraphEntities(debtorKey, creditorKey, timestampPacs008);",
					"            account_holders = prep.prepGraphAccountHolders(entitiesPrefix, accountsPrefix, debtorKey, debtorAccountKey, creditorKey, creditorAccountKey, timestampPacs008);",
					"            transactions = prep.prepGraphTransactions(accountsPrefix, debtorAccountKey, creditorAccountKey, currency, amount, endToEndId, timestampPacs008, messageIdPacs008);",
					"",
					"            postRequests = [{",
					"                url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(pacs008)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_accounts}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(accounts)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_entities}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(entities)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(transactions)",
					"                }",
					"            }, {",
					"                url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_account_holders}`,",
					"                method: 'POST',",
					"                header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                body: {",
					"                    mode: 'raw',",
					"                    raw: JSON.stringify(account_holders)",
					"                }",
					"            }];",
					"        }",
					"",
					"        postRequests.forEach((postRequest) => {",
					"            _pm.sendRequest(postRequest, (error, response) => {",
					"                console.log(error ? error : response.json());",
					"            });",
					"        });",
					"",
					"        console.log('pacs.002 trigger payload for Data Preparation: ' + JSON.stringify(pacs002TriggerPayload[0]));",
					"",
					"        _pm.globals.set(\"pacs002DataPrep\", JSON.stringify(pacs002TriggerPayload[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002Sts', pacs002Sts);",
					"        _pm.globals.set('currency', currency);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        _pm.globals.set('baseTimestamp', timestampPacs008);",
					"        _pm.globals.set('debtorKey', debtorKey);",
					"        _pm.globals.set('debtorAccountKey', debtorAccountKey);",
					"        _pm.globals.set('creditorKey', creditorKey);",
					"        _pm.globals.set('creditorAccountKey', creditorAccountKey);",
					"        if (activePain001) {",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"            _pm.globals.set('baseTimestamp', timestampPain001);",
					"        }",
					"",
					"        this.logDataCache(dataCache[0]);",
					"",
					"    },",
					"",
					"    /**",
					"     * Creates multiple sets of transactions for testing purposes, each with its own unique identifiers and timestamps, and includes all necessary data and database operations.",
					"     * The transaction sets will include pain.001/013 messages if the environment variable activePain001 = true.",
					"     * The transaction set will contain a pacs.008 and a pacs.002 message.",
					"     * The messages in the set will be linked through the same EndToEndId.",
					"     * The function stashes created data in global variables can be retrieved with the `pm.globals.get()` method.",
					"     *",
					"     * @param {number|null|undefined} [numberOfSets=1] - The number of transaction sets to create. Defaults to 1.",
					"     * @param {string|null|undefined} [debtorIdRef=null] - Reference identifier for the debtor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {string|null|undefined} [debtorAccountIdRef=null] - Reference account identifier for the debtor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {string|null|undefined} [creditorIdRef=null] - Reference identifier for the creditor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {string|null|undefined} [creditorAccountIdRef=null] - Reference account identifier for the creditor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps. Defaults to 0.",
					"     * @param {number|null|undefined} [timestampIterationLeap] - The leap in milliseconds between each transaction set's timestamp. Defaults to the total epoch divided by the number of sets or 0 if only one set is created.",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction amount. Defaults to 'XTS'.",
					"     * @param {number|null|undefined} [amountRef=null] - Reference amount for the transaction. If provided, this amount will be used for all transaction sets. Defaults to null, which means a random amount will be generated for each set.",
					"     * @param {string|null|undefined} [transactionDescriptionRef=null] - Reference description for the transaction. If provided, this description will be used for all transaction sets. Defaults to null, which means a random description will be generated for each set.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Transaction status for pacs.002.001.12 message. Defaults to 'ACCC' (a successul transaction).",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor. Defaults to 25.",
					"     * @param {string|null|undefined} [transactionPurpose] - Purpose of the transaction. Defaults to 'TRANSFER' if pain.001/013 ingestion is enabled, otherwise 'MP2P'.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude coordinate of the transaction location. Defaults to -3.1609.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude coordinate of the transaction location. Defaults to 38.3588.",
					"     */",
					"",
					"    createMoreTransactionSets: function (numberOfSets, debtorIdRef, debtorAccountIdRef, creditorIdRef, creditorAccountIdRef, timestampEpoch, timestampIterationLeap, currency, amountRef, transactionDescriptionRef, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"        }",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        numberOfSets = numberOfSets ? numberOfSets : 1;",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        if (numberOfSets == 1) {",
					"            timestampIterationLeap = 0",
					"        } else {",
					"            timestampIterationLeap = timestampIterationLeap ? timestampIterationLeap : Math.trunc(timestampEpoch / numberOfSets)",
					"        }",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        timestampEpochStart = timestampEpoch;",
					"",
					"        for (let step = 0; step < numberOfSets; step++) {",
					"            // Match incoming parameter or randomise",
					"            let debtorId = debtorIdRef || 'dbtr_' + uuid.v4().replace(/-/g, '') + debtorIdType;",
					"            let debtorAccountId = debtorAccountIdRef || 'dbtrAcct_' + uuid.v4().replace(/-/g, '') + debtorAccountType + debtorAgentId;",
					"            let creditorId = creditorIdRef || 'cdtr_' + uuid.v4().replace(/-/g, '') + creditorIdType;",
					"            let creditorAccountId = creditorAccountIdRef || 'cdtrAcct_' + uuid.v4().replace(/-/g, '') + debtorAccountType + creditorAgentId;",
					"",
					"            var debtorKey = debtorId;",
					"            var debtorAccountKey = debtorAccountId;",
					"            var creditorKey = creditorId;",
					"            var creditorAccountKey = creditorAccountId;",
					"",
					"            let amount = amountRef || Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"            let transactionDescription = transactionDescriptionRef || uuid.v4().replace(/-/g, '');",
					"            let timestampPacs008 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 1)).toISOString();",
					"            let timestampPacs002 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 0)).toISOString();",
					"",
					"            if (!debtorIdRef) {",
					"                utils.createEntity(debtorId);",
					"            }",
					"            if (!creditorIdRef) {",
					"                utils.createEntity(creditorId);",
					"            }",
					"            if (!debtorAccountIdRef) {",
					"                utils.createSingleAccount(debtorKey, debtorAccountKey, timestampPacs008);",
					"            }",
					"            if (!creditorAccountIdRef) {",
					"                utils.createSingleAccount(creditorKey, creditorAccountKey, timestampPacs008);",
					"            }",
					"",
					"            let endToEndId = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"            var timestampPain001;",
					"            var timestampPain013;",
					"            var messageIdPain001;",
					"            var messageIdPain013;",
					"",
					"            var baseCreDtTm;",
					"            if (activePain001) {",
					"                timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"                timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"                baseCreDtTm = timestampPain001;",
					"            } else {",
					"                baseCreDtTm = timestampPacs008;",
					"            }",
					"",
					"            const dataCache = [{",
					"                \"dbtrId\": `${debtorKey}`,",
					"                \"cdtrId\": `${creditorKey}`,",
					"                \"dbtrAcctId\": `${debtorAccountKey}`,",
					"                \"cdtrAcctId\": `${creditorAccountKey}`,",
					"                \"creDtTm\": `${baseCreDtTm}`,",
					"                \"amt\": {",
					"                    \"amt\": amount,",
					"                    \"ccy\": `${currency}`",
					"                }",
					"            }];",
					"",
					"            var pain001;",
					"            var pain013;",
					"",
					"            if (activePain001) {",
					"                messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"                messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"                pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"                pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"            }",
					"",
					"            const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"            var transactions = [];",
					"            var postRequests = [];",
					"",
					"            if (activePain001) {",
					"                transactions = prep.prepGraphTransactions(accountsPrefix, debtorAccountKey, creditorAccountKey, currency, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002Sts, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain001)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain013)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            } else {",
					"                let transactions = [{",
					"                    \"_from\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                    \"_to\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                    \"TxTp\": \"pacs.008.001.10\",",
					"                    \"CreDtTm\": `${timestampPacs008}`,",
					"                    \"Amt\": amount,",
					"                    \"Ccy\": \"USD\",",
					"                    \"PmtInfId\": `${messageIdPacs008}`,",
					"                    \"EndToEndId\": `${endToEndId}`",
					"                },",
					"                {",
					"                    \"_from\": `${accountsPrefix}` + `${creditorAccountId}`,",
					"                    \"_to\": `${accountsPrefix}` + `${debtorAccountId}`,",
					"                    \"TxTp\": \"pacs.002.001.12\",",
					"                    \"TxSts\": `${pacs002Sts}`,",
					"                    \"CreDtTm\": `${timestampPacs002}`,",
					"                    \"PmtInfId\": `${messageIdPacs002}`,",
					"                    \"EndToEndId\": `${endToEndId}`",
					"                }]",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            }",
					"",
					"            postRequests.forEach((postRequest) => {",
					"                _pm.sendRequest(postRequest, (error, response) => {",
					"                    console.log(error ? error : response.json());",
					"                });",
					"            });",
					"",
					"            if (activePain001) {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pain.001:${timestampPain001} to pacs.002:${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            } else {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pacs.008:${timestampPacs008} to pacs.002${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            }",
					"",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Creates multiple sets of transactions for testing purposes, each with its own unique identifiers and timestamps, and includes all necessary data and database operations.",
					"     * This function allows more rapid transactions compared to the `createNewTransactionSet` or `createMoreTransactionSets` functions that separates transactions with a .",
					"     * The transaction sets will include pain.001/013 messages if the environment variable activePain001 = true.",
					"     * The transaction set will contain a pacs.008 and a pacs.002 message.",
					"     * The messages in the set will be linked through the same EndToEndId.",
					"     * The function stashes created data in global variables can be retrieved with the `pm.globals.get()` method.",
					"     *",
					"     * @param {number|null|undefined} [numberOfSets=1] - The number of transaction sets to create. Defaults to 1.",
					"     * @param {string|null|undefined} [debtorIdRef=null] - Reference identifier for the debtor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {string|null|undefined} [debtorAccountIdRef=null] - Reference account identifier for the debtor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {string|null|undefined} [creditorIdRef=null] - Reference identifier for the creditor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {string|null|undefined} [creditorAccountIdRef=null] - Reference account identifier for the creditor. If provided, this ID will be used for all transaction sets. Defaults to null, which means a new ID will be generated for each set.",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps. Defaults to 0.",
					"     * @param {number|null|undefined} [timestampIterationLeap] - The leap in milliseconds between each transaction set's timestamp. Defaults to the total epoch divided by the number of sets or 0 if only one set is created.",
					"     * @param {number|null|undefined} [timestampInterval=300000] - Interval in milliseconds between different types of messages within a transaction set. Defaults to 300,000 milliseconds (5 minutes).",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction amount. Defaults to 'XTS'.",
					"     * @param {number|null|undefined} [amountRef=null] - Reference amount for the transaction. If provided, this amount will be used for all transaction sets. Defaults to null, which means a random amount will be generated for each set.",
					"     * @param {string|null|undefined} [transactionDescriptionRef=null] - Reference description for the transaction. If provided, this description will be used for all transaction sets. Defaults to null, which means a random description will be generated for each set.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Transaction status for pacs.002.001.12 message. Defaults to 'ACCC' (a successful transaction).",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor. Defaults to 25.",
					"     * @param {string|null|undefined} [transactionPurpose] - Purpose of the transaction. Defaults to 'TRANSFER' if pain.001/013 ingestion is enabled, otherwise 'MP2P'.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude coordinate of the transaction location. Defaults to -3.1609.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude coordinate of the transaction location. Defaults to 38.3588.",
					"     */",
					"",
					"    createQuickerTransactionSets: function (numberOfSets, debtorIdRef, debtorAccountIdRef, creditorIdRef, creditorAccountIdRef, timestampEpoch, timestampIterationLeap, timestampInterval, currency, amountRef, transactionDescriptionRef, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"        const arangoUrl = _pm.environment.get('arangoUrl');",
					"        const db_messagehistory = _pm.environment.get('db_messagehistory');",
					"        const db_historygraph = _pm.environment.get('db_historygraph');",
					"        const db_coll_graph_transactions = _pm.environment.get('db_coll_graph_transactions');",
					"",
					"        var db_coll_msg_transactionHistoryPain001;",
					"        var db_coll_msg_transactionHistoryPain013;",
					"        if (activePain001) {",
					"            db_coll_msg_transactionHistoryPain001 = _pm.environment.get('db_coll_msg_transactionHistoryPain001');",
					"            db_coll_msg_transactionHistoryPain013 = _pm.environment.get('db_coll_msg_transactionHistoryPain013');",
					"        }",
					"        const db_coll_msg_transactionHistoryPacs008 = _pm.environment.get('db_coll_msg_transactionHistoryPacs008');",
					"        const db_coll_msg_transactionHistoryPacs002 = _pm.environment.get('db_coll_msg_transactionHistoryPacs002');",
					"        const accountsPrefix = 'accounts/';",
					"",
					"        // Variables for test data parameterisation",
					"",
					"        // Essential defaults",
					"        numberOfSets = numberOfSets ? numberOfSets : 1;",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        if (numberOfSets == 1) {",
					"            timestampIterationLeap = 0",
					"        } else {",
					"            timestampIterationLeap = timestampIterationLeap ? timestampIterationLeap : Math.trunc(timestampEpoch / numberOfSets)",
					"        }",
					"        timestampInterval = timestampInterval ? timestampInterval : 300000; // 300,000 milliseconds = 5 minutes",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        timestampEpochStart = timestampEpoch;",
					"",
					"        for (let step = 0; step < numberOfSets; step++) {",
					"            // Match incoming parameter or randomise",
					"            let debtorId = debtorIdRef || 'dbtr_' + uuid.v4().replace(/-/g, '') + debtorIdType;",
					"            let debtorAccountId = debtorAccountIdRef || 'dbtrAcct_' + uuid.v4().replace(/-/g, '') + debtorAccountType + debtorAgentId;",
					"            let creditorId = creditorIdRef || 'cdtr_' + uuid.v4().replace(/-/g, '') + creditorIdType;",
					"            let creditorAccountId = creditorAccountIdRef || 'cdtrAcct_' + uuid.v4().replace(/-/g, '') + debtorAccountType + creditorAgentId;",
					"",
					"            var debtorKey = debtorId;",
					"            var debtorAccountKey = debtorAccountId;",
					"            var creditorKey = creditorId;",
					"            var creditorAccountKey = creditorAccountId;",
					"",
					"            let amount = amountRef || Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"            let transactionDescription = transactionDescriptionRef || uuid.v4().replace(/-/g, '');",
					"",
					"            let timestampPacs008 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 1)).toISOString();",
					"            let timestampPacs002 = new Date(new Date(Date.now() - timestampEpochStart + (timestampIterationLeap * step) - timestampInterval * 0)).toISOString();",
					"",
					"            if (!debtorIdRef) {",
					"                utils.createEntity(debtorId);",
					"            }",
					"            if (!creditorIdRef) {",
					"                utils.createEntity(creditorId);",
					"            }",
					"            if (!debtorAccountIdRef) {",
					"                utils.createSingleAccount(debtorKey, debtorAccountKey, timestampPacs008);",
					"            }",
					"            if (!creditorAccountIdRef) {",
					"                utils.createSingleAccount(creditorKey, creditorAccountKey, timestampPacs008);",
					"            }",
					"",
					"            let endToEndId = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"            let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"            var timestampPain001;",
					"            var timestampPain013;",
					"",
					"            var baseCreDtTm;",
					"            if (activePain001) {",
					"                timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"                timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"                baseCreDtTm = timestampPain001;",
					"            } else {",
					"                baseCreDtTm = timestampPacs008;",
					"            }",
					"",
					"            const dataCache = [{",
					"                \"dbtrId\": `${debtorKey}`,",
					"                \"cdtrId\": `${creditorKey}`,",
					"                \"dbtrAcctId\": `${debtorAccountKey}`,",
					"                \"cdtrAcctId\": `${creditorAccountKey}`,",
					"                \"creDtTm\": `${baseCreDtTm}`,",
					"                \"amt\": {",
					"                    \"amt\": amount,",
					"                    \"ccy\": `${currency}`",
					"                }",
					"            }];",
					"",
					"            const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"            var messageIdPain001;",
					"            var messageIdPain013;",
					"",
					"            var pain001;",
					"            var pain013;",
					"",
					"            if (activePain001) {",
					"                messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"                messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"                pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"                pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"            }",
					"",
					"            var transactions = [];",
					"            var postRequests = [];",
					"",
					"            if (activePain001) {",
					"                transactions = prep.prepGraphTransactions(accountsPrefix, debtorAccountKey, creditorAccountKey, currency, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002Sts, timestampPain001, messageIdPain001, timestampPain013, messageIdPain013);",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain001}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain001)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPain013}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pain013)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            } else {",
					"                transactions = prep.prepGraphTransactions(accountsPrefix, debtorAccountKey, creditorAccountKey, currency, amount, endToEndId, timestampPacs008, messageIdPacs008, timestampPacs002, messageIdPacs002, pacs002Sts);",
					"",
					"                postRequests = [{",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs008}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs008)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_messagehistory}/_api/document/${db_coll_msg_transactionHistoryPacs002}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(pacs002)",
					"                    }",
					"                }, {",
					"                    url: `${arangoUrl}/_db/${db_historygraph}/_api/document/${db_coll_graph_transactions}`,",
					"                    method: 'POST',",
					"                    header: { 'Authorization': `Bearer ${_pm.globals.get(\"arangoToken\")}` },",
					"                    body: {",
					"                        mode: 'raw',",
					"                        raw: JSON.stringify(transactions)",
					"                    }",
					"                }];",
					"            }",
					"",
					"            postRequests.forEach((postRequest) => {",
					"                _pm.sendRequest(postRequest, (error, response) => {",
					"                    console.log(error ? error : response.json());",
					"                });",
					"            });",
					"",
					"            if (activePain001) {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pain.001:${timestampPain001} to pacs.002:${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            } else {",
					"                console.log(`Created transaction set ${step + 1}/${numberOfSets} from ${debtorAccountId} to ${creditorAccountId} from pacs.008:${timestampPacs008} to pacs.002${timestampPacs002} with EndToEndId ${endToEndId}`);",
					"            }",
					"",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Creates a new set of transactions for testing purposes, including all necessary data, and stores it in memory so that the transactions can be submitted to the API in sequence as valid messages.",
					"     * The transaction sets will include pain.001/013 messages if the environment variable activePain001 = true.",
					"     * The transaction set will contain a pacs.008 and a pacs.002 message.",
					"     * The messages in the set will be linked through the same EndToEndId.",
					"     * The function stashes created data in global variables can be retrieved with the `pm.globals.get()` method.",
					"     *",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps. Defaults to 0.",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction amount. Defaults to 'XTS'.",
					"     * @param {number|null|undefined} [amount] - Transaction amount. Defaults to a random value between 10 and 1000.",
					"     * @param {string|null|undefined} [transactionDescription='Generic payment description'] - Description of the transaction. Defaults to 'Generic payment description'.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Transaction status for pacs.002.001.12 message. Defaults to 'ACCC' (a successful transaction).",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor. Defaults to 25.",
					"     * @param {string|null|undefined} [transactionPurpose] - Purpose of the transaction. Defaults to 'TRANSFER' if pain.001/013 ingestion is enabled, otherwise 'MP2P'.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude coordinate of the transaction location. Defaults to -3.1609.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude coordinate of the transaction location. Defaults to 38.3588.",
					"     */",
					"",
					"    createNewTransactionSetInMemory: function (timestampEpoch, currency, amount, transactionDescription, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        // Variables for test data parameterisation",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = uuid.v4().replace(/-/g, '');",
					"        let creditorId = uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"        var baseCreDtTm;",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            baseCreDtTm = timestampPain001;",
					"        } else {",
					"            baseCreDtTm = timestampPacs008;",
					"        }",
					"",
					"        var debtorKey = debtorId + debtorIdType;",
					"        var debtorAccountKey = debtorAccountId + debtorAccountType + debtorAgentId;",
					"        var creditorKey = creditorId + creditorIdType;",
					"        var creditorAccountKey = creditorAccountId + debtorAccountType + creditorAgentId;",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorKey}`,",
					"            \"cdtrId\": `${creditorKey}`,",
					"            \"dbtrAcctId\": `${debtorAccountKey}`,",
					"            \"cdtrAcctId\": `${creditorAccountKey}`,",
					"            \"creDtTm\": `${baseCreDtTm}`,",
					"            \"amt\": {",
					"                \"amt\": amount,",
					"                \"ccy\": `${currency}`",
					"            }",
					"        }];",
					"",
					"        if (activePain001) {",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"            pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"        }",
					"",
					"        const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"        //let deleteTxTp = lodash.unset(pacs008[0],\"TxTp\");",
					"",
					"        const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"        console.log('pacs.008 message: ' + JSON.stringify(pacs008[0]));",
					"        console.log('pacs.002 trigger payload: ' + JSON.stringify(pacs002[0]));",
					"",
					"        _pm.globals.set(\"pacs008\", JSON.stringify(pacs008[0]));",
					"        _pm.globals.set(\"pacs002\", JSON.stringify(pacs002[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002Sts', pacs002Sts);",
					"        _pm.globals.set('currency', currency);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        _pm.globals.set('baseTimestamp', timestampPacs008);",
					"        _pm.globals.set('debtorKey', debtorKey);",
					"        _pm.globals.set('debtorAccountKey', debtorAccountKey);",
					"        _pm.globals.set('creditorKey', creditorKey);",
					"        _pm.globals.set('creditorAccountKey', creditorAccountKey);",
					"        if (activePain001) {",
					"            _pm.globals.set(\"pain001\", JSON.stringify(pain001[0]));",
					"            _pm.globals.set(\"pain013\", JSON.stringify(pain013[0]));",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"            _pm.globals.set('baseTimestamp', timestampPain001);",
					"        }",
					"",
					"        this.logDataCache(dataCache[0]);",
					"",
					"        if (activePain001) {",
					"            console.log(`Message IDs:",
					"                pain.001: ${_pm.globals.get(\"messageIdPain001\")}\",",
					"                pain.013: ${_pm.globals.get(\"messageIdPain013\")}\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        } else {",
					"            console.log(`Message IDs:",
					"                pain.001: disabled\",",
					"                pain.013: disabled\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Creates an additional set of transactions for testing purposes, including all necessary data, and stores it in memory so that the transactions can be submitted to the API in sequence as valid messages.",
					"     * The transaction sets will include pain.001/013 messages if the environment variable activePain001 = true.",
					"     * The transaction set will contain a pacs.008 and a pacs.002 message.",
					"     * The messages in the set will be linked through the same EndToEndId.",
					"     * The function stashes created data in global variables can be retrieved with the `pm.globals.get()` method.",
					"     *",
					"     * @param {string|null|undefined} [debtorIdRef=null] - Reference identifier for the debtor. If provided, this ID will be used. Defaults to null, which means a new ID will be generated.",
					"     * @param {string|null|undefined} [debtorAccountIdRef=null] - Reference account identifier for the debtor. If provided, this ID will be used. Defaults to null, which means a new ID will be generated.",
					"     * @param {string|null|undefined} [creditorIdRef=null] - Reference identifier for the creditor. If provided, this ID will be used. Defaults to null, which means a new ID will be generated.",
					"     * @param {string|null|undefined} [creditorAccountIdRef=null] - Reference account identifier for the creditor. If provided, this ID will be used. Defaults to null, which means a new ID will be generated.",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps. Defaults to 0.",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction amount. Defaults to 'XTS'.",
					"     * @param {number|null|undefined} [amount] - Transaction amount. Defaults to a random value between 10 and 1000.",
					"     * @param {string|null|undefined} [transactionDescription='Generic payment description'] - Description of the transaction. Defaults to 'Generic payment description'.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Transaction status for pacs.002.001.12 message. Defaults to 'ACCC' (a successful transaction).",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor. Defaults to 25.",
					"     * @param {string|null|undefined} [transactionPurpose] - Purpose of the transaction. Defaults to 'TRANSFER' if pain.001/013 ingestion is enabled, otherwise 'MP2P'.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude coordinate of the transaction location. Defaults to -3.1609.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude coordinate of the transaction location. Defaults to 38.3588.",
					"     */",
					"",
					"    createAdditionalTransactionSetInMemory: function (debtorIdRef, debtorAccountIdRef, creditorIdRef, creditorAccountIdRef, timestampEpoch, currency, amount, transactionDescription, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"        // Variables for test data parameterisation",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"        activePain001 ? console.log(\"pain.001/013 ingestion is enabled\") : console.log(\"pain.001/013 ingestion is disabled\");",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"",
					"        let debtorId = debtorIdRef || 'dbtr_' + uuid.v4().replace(/-/g, '') + debtorIdType;",
					"        let debtorAccountId = debtorAccountIdRef || 'dbtrAcct_' + uuid.v4().replace(/-/g, '') + debtorAccountType + debtorAgentId;",
					"        let creditorId = creditorIdRef || 'cdtr_' + uuid.v4().replace(/-/g, '') + creditorIdType;",
					"        let creditorAccountId = creditorAccountIdRef || 'cdtrAcct_' + uuid.v4().replace(/-/g, '') + debtorAccountType + creditorAgentId;",
					"",
					"        var debtorKey = debtorId;",
					"        var debtorAccountKey = debtorAccountId;",
					"        var creditorKey = creditorId;",
					"        var creditorAccountKey = creditorAccountId;",
					"",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        console.log(\"pacs.002 payload timestamp: \" + timestampPacs002);",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"        var baseCreDtTm;",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            baseCreDtTm = timestampPain001;",
					"        } else {",
					"            baseCreDtTm = timestampPacs008;",
					"        }",
					"",
					"        const dataCache = [{",
					"            \"dbtrId\": `${debtorKey}`,",
					"            \"cdtrId\": `${creditorKey}`,",
					"            \"dbtrAcctId\": `${debtorAccountKey}`,",
					"            \"cdtrAcctId\": `${creditorAccountKey}`,",
					"            \"creDtTm\": `${baseCreDtTm}`,",
					"            \"amt\": {",
					"                \"amt\": amount,",
					"                \"ccy\": `${currency}`",
					"            }",
					"        }];",
					"",
					"        if (activePain001) {",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"            pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"        }",
					"",
					"        const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"        let deleteTxTp = lodash.unset(pacs008[0],\"TxTp\");",
					"",
					"        const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"        console.log('pacs.002 trigger payload: ' + JSON.stringify(pacs002[0]));",
					"",
					"        _pm.globals.set(\"pacs008\", JSON.stringify(pacs008[0]));",
					"        _pm.globals.set(\"pacs002\", JSON.stringify(pacs002[0]));",
					"        _pm.globals.set(\"dataCache\", JSON.stringify(dataCache[0]));",
					"        _pm.globals.set('debtorId', debtorId);",
					"        _pm.globals.set('debtorAccountId', debtorAccountId);",
					"        _pm.globals.set('debtorDoB', debtorDoB);",
					"        _pm.globals.set('creditorId', creditorId);",
					"        _pm.globals.set('creditorAccountId', creditorAccountId);",
					"        _pm.globals.set('timestampPacs008', timestampPacs008);",
					"        _pm.globals.set('timestampPacs002', timestampPacs002);",
					"        _pm.globals.set('endToEndId', endToEndId);",
					"        _pm.globals.set('pacs002Sts', pacs002Sts);",
					"        _pm.globals.set('currency', currency);",
					"        _pm.globals.set('amount', amount);",
					"        _pm.globals.set('transactionDescription', transactionDescription);",
					"        _pm.globals.set('transactionPurpose', transactionPurpose);",
					"        _pm.globals.set('transactionLat', transactionLat);",
					"        _pm.globals.set('transactionLong', transactionLong);",
					"        _pm.globals.set('messageIdPacs008', messageIdPacs008);",
					"        _pm.globals.set('messageIdPacs002', messageIdPacs002);",
					"        _pm.globals.set('baseTimestamp', timestampPacs008);",
					"        _pm.globals.set('debtorKey', debtorKey);",
					"        _pm.globals.set('debtorAccountKey', debtorAccountKey);",
					"        _pm.globals.set('creditorKey', creditorKey);",
					"        _pm.globals.set('creditorAccountKey', creditorAccountKey);",
					"        if (activePain001) {",
					"            _pm.globals.set(\"pain001\", JSON.stringify(pain001[0]));",
					"            _pm.globals.set(\"pain013\", JSON.stringify(pain013[0]));",
					"            _pm.globals.set('timestampPain001', timestampPain001);",
					"            _pm.globals.set('timestampPain013', timestampPain013);",
					"            _pm.globals.set('messageIdPain001', messageIdPain001);",
					"            _pm.globals.set('messageIdPain013', messageIdPain013);",
					"            _pm.globals.set('baseTimestamp', timestampPain001);",
					"        }",
					"",
					"        this.logDataCache(dataCache[0]);",
					"",
					"        if (activePain001) {",
					"            console.log(`Message IDs:",
					"                pain.001: ${_pm.globals.get(\"messageIdPain001\")}\",",
					"                pain.013: ${_pm.globals.get(\"messageIdPain013\")}\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        } else {",
					"            console.log(`Message IDs:",
					"                pain.001: disabled\",",
					"                pain.013: disabled\",",
					"                pacs.008: ${_pm.globals.get(\"messageIdPacs008\")}\",",
					"                pacs.002: ${_pm.globals.get(\"messageIdPacs002\")}\"",
					"            `);",
					"        }",
					"    },",
					"",
					"    /**",
					"     * Creates a new PACS.008 transaction with all associated details and identifiers.",
					"     *",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps.",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction.",
					"     * @param {number|null|undefined} [amount=random value] - Transaction amount, defaults to a random value between 10 and 1000.",
					"     * @param {string|null|undefined} [transactionDescription='Generic payment description'] - Description of the transaction.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Status for the PACS.002 message.",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor.",
					"     * @param {string|null|undefined} [transactionPurpose='TRANSFER' or 'MP2P'] - Purpose of the transaction, defaults based on whether pain.001/013 ingestion is active.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude of the transaction's location.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude of the transaction's location.",
					"     * @returns {Object} The created PACS.008 transaction object.",
					"     */",
					"",
					"    createNewPacs008Transaction: function (timestampEpoch, currency, amount, transactionDescription, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"",
					"        // Variables for test data parameterisation",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = uuid.v4().replace(/-/g, '');",
					"        let creditorId = uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"        var baseCreDtTm;",
					"        const dataCache = [{}];",
					"",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"            pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"            baseCreDtTm = timestampPain001;",
					"        } else {",
					"            baseCreDtTm = timestampPacs008;",
					"        }",
					"",
					"        const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"        const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"        return pacs008[0];",
					"    },",
					"",
					"    /**",
					"     * Creates a new PACS.002 transaction with all associated details and identifiers.",
					"     *",
					"     * @param {number|null|undefined} [timestampEpoch=0] - Epoch timestamp for adjusting transaction timestamps.",
					"     * @param {string|null|undefined} [currency='XTS'] - Currency code for the transaction.",
					"     * @param {number|null|undefined} [amount=random value] - Transaction amount, defaults to a random value between 10 and 1000.",
					"     * @param {string|null|undefined} [transactionDescription='Generic payment description'] - Description of the transaction.",
					"     * @param {string|null|undefined} [pacs002Sts='ACCC'] - Status for the PACS.002 message.",
					"     * @param {number|null|undefined} [debtorAge=25] - Age of the debtor.",
					"     * @param {string|null|undefined} [transactionPurpose='TRANSFER' or 'MP2P'] - Purpose of the transaction, defaults based on whether pain.001/013 ingestion is active.",
					"     * @param {number|null|undefined} [transactionLat=-3.1609] - Latitude of the transaction's location.",
					"     * @param {number|null|undefined} [transactionLong=38.3588] - Longitude of the transaction's location.",
					"     * @returns {Object} The created PACS.002 transaction object.",
					"     */",
					"",
					"    createNewPacs002Transaction: function (timestampEpoch, currency, amount, transactionDescription, pacs002Sts, debtorAge, transactionPurpose, transactionLat, transactionLong) {",
					"",
					"",
					"        // Variables for test data parameterisation",
					"        const activePain001 = JSON.parse(_pm.environment.get('activePain001'));",
					"",
					"        // Essential defaults",
					"        timestampEpoch = timestampEpoch ? timestampEpoch : 0;",
					"        currency = currency ? currency : 'XTS';",
					"        amount = amount ? amount : Math.round((Math.random() * (1000 - 10) + 10) * 100) / 100;",
					"        transactionDescription = transactionDescription ? transactionDescription : 'Generic payment description';",
					"        pacs002Sts = pacs002Sts ? pacs002Sts : 'ACCC';",
					"        debtorAge = debtorAge ? debtorAge : 25;",
					"        if (activePain001) {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'TRANSFER' // or 'WITHDRAWAL', or 'PAYMENT'",
					"        } else {",
					"            transactionPurpose = transactionPurpose ? transactionPurpose : 'MP2P' // or 'MP2B', or 'CASH'",
					"        }",
					"        transactionLat = transactionLat ? transactionLat : -3.1609",
					"        transactionLong = transactionLong ? transactionLong : 38.3588",
					"",
					"        // Defaults",
					"        const timestampInterval = 300000; // 300,000 milliseconds = 5 minutes",
					"        let debtorId = uuid.v4().replace(/-/g, '');",
					"        let debtorAccountId = uuid.v4().replace(/-/g, '');",
					"        let creditorId = uuid.v4().replace(/-/g, '');",
					"        let creditorAccountId = uuid.v4().replace(/-/g, '');",
					"        let debtorDoB = new Date(new Date().setDate(new Date().getDate() - (debtorAge * 366))).toISOString().substring(0, 10);",
					"        let timestampPacs008 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 1)).toISOString();",
					"        let timestampPacs002 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 0)).toISOString();",
					"        let endToEndId = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs008 = uuid.v4().replace(/-/g, '');",
					"        let messageIdPacs002 = uuid.v4().replace(/-/g, '');",
					"",
					"        var timestampPain001;",
					"        var timestampPain013;",
					"        var messageIdPain001;",
					"        var messageIdPain013;",
					"",
					"        var pain001;",
					"        var pain013;",
					"        var baseCreDtTm;",
					"        const dataCache = [{}];",
					"",
					"        if (activePain001) {",
					"            timestampPain001 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 3)).toISOString();",
					"            timestampPain013 = new Date(new Date(Date.now() - timestampEpoch - timestampInterval * 2)).toISOString();",
					"            messageIdPain001 = uuid.v4().replace(/-/g, '');",
					"            messageIdPain013 = uuid.v4().replace(/-/g, '');",
					"",
					"            pain001 = [prep.prepPain001Msg(messageIdPain001, timestampPain001, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, transactionPurpose, currency, amount, creditorId, creditorIdType, creditorAccountId, creditAccountType, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"            pain013 = [prep.prepPain013Msg(messageIdPain013, timestampPain013, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, endToEndId, currency, amount, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionLat, transactionLong, dataCache)];",
					"            baseCreDtTm = timestampPain001;",
					"        } else {",
					"            baseCreDtTm = timestampPacs008;",
					"        }",
					"",
					"        const pacs008 = [prep.prepPacs008Msg(messageIdPacs008, timestampPacs008, endToEndId, currency, amount, debtorDoB, debtorId, debtorIdType, debtorAccountId, debtorAccountType, creditorId, creditorIdType, creditorAccountId, creditorAccountType, transactionPurpose, transactionDescription, transactionLat, transactionLong, dataCache)];",
					"",
					"        const pacs002 = [prep.prepPacs002Msg(messageIdPacs002, timestampPacs002, endToEndId, pacs002Sts, dataCache)];",
					"",
					"        return pacs002[0];",
					"    },",
					"",
					"    getRuleBody: function (ruleId, ruleCfgVer, messageBody, dataCache) {",
					"        ruleId = ruleId ? ruleId : '901@1.0.0';",
					"        ruleCfgVer = ruleCfgVer ? ruleCfgVer : '1.0.0';",
					"        const natsPub = `pub-rule-${ruleId}`;",
					"        const natsSub = `sub-rule-${ruleId}`;",
					"        const msgId = messageBody.FIToFIPmtSts.GrpHdr.MsgId;",
					"        return JSON.stringify({",
					"            \"destination\": `${natsSub}`,",
					"            \"consumer\": `${natsPub}`,",
					"            \"functionName\": `${msgId}`,",
					"            \"message\": {",
					"                \"transaction\": messageBody,",
					"                \"DataCache\": dataCache,",
					"                \"networkMap\": {",
					"                    \"name\": \"Step-by-step processor testing - rule output to NATS REST proxy\",",
					"                    \"active\": true,",
					"                    \"cfg\": \"1.0.0\",",
					"                    \"messages\": [",
					"                        {",
					"                            \"id\": \"004@1.0.0\",",
					"                            \"cfg\": \"1.0.0\",",
					"                            \"txTp\": \"pacs.002.001.12\",",
					"                            \"typologies\": [",
					"                                {",
					"                                    \"id\": \"typology_999@1.0.0\",",
					"                                    \"cfg\": \"1.0.0\",",
					"                                    \"rules\": [",
					"                                        {",
					"                                            \"id\": `${ruleId}`,",
					"                                            \"cfg\": `${ruleCfgVer}`",
					"                                        }",
					"                                    ]",
					"                                }",
					"                            ]",
					"                        }",
					"                    ]",
					"                },",
					"                \"metaData\": {",
					"                    \"prcgTmDP\": 0,",
					"                    \"traceParent\": `00-postman-${msgId}-01`,",
					"                    \"prcgTmCRSP\": 0",
					"                }",
					"            }",
					"        });",
					"    }",
					"",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}